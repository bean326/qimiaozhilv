package cc.lv1.rpg.gs.entity.controller;


import vin.rabbit.net.AppMessage;
import vin.rabbit.util.ByteBuffer;
import vin.rabbit.util.collection.impl.ArrayList;
import cc.lv1.rpg.gs.entity.ext.Bag;
import cc.lv1.rpg.gs.entity.ext.EquipSet;
import cc.lv1.rpg.gs.entity.ext.SkillTome;
import cc.lv1.rpg.gs.entity.ext.TaskInfo;
import cc.lv1.rpg.gs.entity.impl.Goods;
import cc.lv1.rpg.gs.entity.impl.Player;
import cc.lv1.rpg.gs.entity.impl.battle.MonsterBattleTmp;
import cc.lv1.rpg.gs.entity.impl.battle.PlayerBattleTmp;
import cc.lv1.rpg.gs.entity.impl.battle.SpriteBattleTmp;
import cc.lv1.rpg.gs.entity.impl.battle.skill.ActiveSkill;
import cc.lv1.rpg.gs.net.SMsg;
import cc.lv1.rpg.gs.other.ErrorCode;

/**
 * 玩家 vs 敌人
 * @author dxw
 *
 */
public class PVEController extends BattleController
{

	private boolean isActive = false;
	
	private PlayerController [] players = null;

	private MonsterController [] monsters = null;
	
	private int playerLength;
	
	private int monsterLength;
	
	//private ArrayList monsterList = new ArrayList(8);
	
	public void update(long timeMillis)
	{
		super.update(timeMillis);
		
		int monsterSize = monsters.length;
		for(int i = 0 ; i < monsterSize ; i ++)
		{
			if(monsters[i] == null)
				continue;
			monsters[i].update(timeMillis);
		}
	}
	
	public void clientMessageChain(PlayerController target, AppMessage msg)
	{
		if(isFinish)
		{
			return;
		}
		int type = msg.getType();
		
		if(type == SMsg.C_BATTLE_ACTION_COMMAND)
		{
			//增加仇恨
			if(target.getPlayer().getBaseInfo().hatred != 0)
			{
				int index = getPlayerIndex(target);
				int hatred = target.getPlayer().getBaseInfo().hatred;
				for (int i = 0; i < monsters.length; i++) 
				{
					MonsterBattleTmp mbt = (MonsterBattleTmp) monsters[i].getAttachment();
					mbt.setHatred(hatred, index);
				}
			}
			int actionType = msg.getBuffer().readByte();
			
			if(actionType == BattleController.SKILLPROCESSOR) //释放技能
			{
				processSkill(target,msg);
			}
			else if(actionType ==2) //释放道具
			{
				processGoods(target,msg);
			}
			else if(actionType == 3) //逃跑
			{
				removePlayer(target);
			}
		}
		else
		{
			super.clientMessageChain(target, msg);
		}
	}
	
	protected void processSkill(PlayerController target, AppMessage msg)
	{
		if(target.getAttachment().isDead())
		{
			return;
		}
		
		int skillId = msg.getBuffer().readInt(); //发送技能的id
		int targetIndex = msg.getBuffer().readByte(); //发送目标的index
		
		if(targetIndex < 0)
			return;
			
		SkillTome skillTome= (SkillTome)target.getPlayer().getExtPlayerInfo("skillTome");
		ActiveSkill skill  = skillTome.getActiveSkill(skillId);
		if(skill == null)
		{
			target.sendAlert(ErrorCode.ALERT_SKILL_NOT_EXIST);
			return;
		}
		EquipSet equipSet = (EquipSet) target.getPlayer().getExtPlayerInfo("equipSet");
		if(!equipSet.checkEquip(skill.weaponType))
		{
			target.sendAlert(ErrorCode.ALERT_NO_SKILL_NEEDARM);
			return;
		}
		MonsterBattleTmp mbt = (MonsterBattleTmp) monsters[targetIndex].getAttachment();
		int monsterBeforeHP = 0,monsterAfterHP = 0;
		
		if(!skill.checkMagicEnough(target))
		{
			target.sendAlert(ErrorCode.ALERT_PLAYER_MAGIC_NOTENOUTH);
			return;
		}
		
		SpriteBattleTmp sbt = target.getAttachment();
		
		if(sbt == null)
		{
			target.sendAlert(ErrorCode.ALERT_INIT_BATTLE_FAIL);
			return;
		}
		
		if(sbt.isLocked())
		{
			target.sendAlert(ErrorCode.ALERT_PLAYER_IS_LOCKED);
			return;
		}
		    
		if(skill.targetType[0] == ActiveSkill.TARGET_TYPE_PLAYERS) //己方
		{
		    if(targetIndex >= playerLength)
		    {
		    	target.sendAlert(ErrorCode.ALERT_OBJECT_INDEX_OVERRUN);
				return;
		    }
		    if(players[targetIndex] == null)
		    {
		    	target.sendAlert(ErrorCode.ALERT_OBJECT_IS_NULL);
		    	return;
		    }
		    sbt.setSkillTarget(players[targetIndex]);
		   
		}
		else if(skill.targetType[0] == ActiveSkill.TARGET_TYPE_MONSTERS) //2：敌方
		{
		
			if(targetIndex >= monsterLength)
			{
				target.sendAlert(ErrorCode.ALERT_OBJECT_INDEX_OVERRUN);
				return;
			}
		    if(monsters[targetIndex] == null)
		    {
		    	target.sendAlert(ErrorCode.ALERT_OBJECT_IS_NULL);
		    	return;
		    }
			sbt.setSkillTarget(monsters[targetIndex]);
			monsterBeforeHP = mbt.getMonster().hitPoint;
		}	
		else
		{
//			System.out.println("other target Object");
			return;
		}
		
		sbt.processActiveSkill(skill);

		monsterAfterHP = mbt.getMonster().hitPoint;
		//设置怪物仇恨值
		if(monsterAfterHP <= 0)
		{
			for (int i = 0; i < monsters.length; i++) 
			{
				if(i == targetIndex)
					continue;
				MonsterBattleTmp mbt2 = (MonsterBattleTmp) monsters[i].getAttachment();
				mbt2.setMonstersToPlayerHatred(getPlayerIndex(target),0.1f);
			}
		}
		if(monsterAfterHP <= 0 || target.getPlayer().hitPoint <= 0 || target.getNetConnection() == null)
			mbt.initHatred(getPlayerIndex(target));
		else
			mbt.setHatred(monsterBeforeHP - monsterAfterHP, skill, getPlayerIndex(target), 0, 0);
		
		//测试打印********************************************************************************
//		int length = players.length;
//		for (int i = 0; i < length; i++)
//		{
//			if(players[i] == null)
//				continue;
//	
//			System.out.println(players[i].getName()+" HP "+players[i].getPlayer().hitPoint+" / "+players[i].getPlayer().maxHitPoint);
//			System.out.println(players[i].getName()+" MP "+players[i].getPlayer().magicPoint+" / "+players[i].getPlayer().maxMagicPoint);
//		}
//		
//		length = monsters.length;
//		for (int i = 0; i < length; i++)
//		{
//			if(monsters[i] == null)
//				continue;
//			System.out.println(monsters[i].getName()+" HP "+monsters[i].getMonster().hitPoint+" / "+monsters[i].getMonster().maxHitPoint);
//			System.out.println(monsters[i].getName()+" MP "+monsters[i].getMonster().magicPoint+" / "+monsters[i].getMonster().maxMagicPoint);
//		}
		//测试打印********************************************************************************
	}
	
	public int getPlayerIndex(PlayerController target)
	{
		for (int i = 0; i < players.length; i++)
		{
			if(players[i] == null)
				continue;
			if(players[i].getName().equals(target.getName()))
			{
				return i;
			}
		}
		return -1;
	}
	

	public void setFighters(PlayerController[] players, SpriteController [] sprite)
	{
		 MonsterController [] monsters = (MonsterController[])sprite;
		 super.setFighters(players, monsters);
		 
		 this.players = players;
		 this.monsters = monsters;
		 playerLength = players.length;
		 monsterLength = monsters.length;
		 
		 PlayerBattleTmp pt = null;
		 
		 int length = players.length;
		 int i = 0;
		 for( ; i < length ; i ++)
		 {
			 if(players[i] == null)
				 continue;
			 
			 pt = new PlayerBattleTmp();
			 pt.setBattle(this);
			 pt.setPlayer(players[i]);
			 pt.setTeamNo(BattleController.TEAM1);
			 pt.setIndex(i);
			 players[i].setAttachment(pt);
			 addPlayer(players[i]);
		 }
		 
		 
		 MonsterBattleTmp mt = null;
		 
		 length = monsters.length;
		 for( i = 0 ; i < length ; i ++)
		 {
			 if(monsters[i] == null)
				 continue;
			 
			 mt = new MonsterBattleTmp();
			 mt.setBattle(this);
			 mt.setMonster(monsters[i]);
			 mt.setTeamNo(BattleController.TEAM2);
			 mt.setIndex(i);
			 monsters[i].setAttachment(mt);
			 monsters[i].setParent(this);
		 }
	}
	
	
	public void writeTo(ByteBuffer buffer)
	{
		buffer.writeByte(BattleController.TEAM1);
//System.out.println("send one team info:");
		int playerLength = players.length;
//System.out.println("length "+playerLength);
		buffer.writeByte(playerLength);
		
		for(int i = 0 ; i < playerLength ; i ++)
		{
			if(players[i] == null)
				continue;
			
			buffer.writeByte(i);
			buffer.writeInt(players[i].getID());
//System.out.println("   player index"+i+" id:"+players[i].getID()+" name:"+players[i].getName());
		}
		
		buffer.writeByte(BattleController.TEAM2);
//System.out.println("send two team info:");
		int monsterLength = monsters.length;
		
		buffer.writeByte(monsterLength);
//System.out.println("length "+monsterLength);
		for(int i = 0 ; i < monsterLength ; i ++)
		{
			if(monsters[i] == null)
				continue;
			
			buffer.writeByte(i);
			monsters[i].getMonster().writeBattleTo(buffer);
//System.out.println("   monster index"+i+" id:"+monsters[i].getID()+" name:"+monsters[i].getName());
		}
	}
	
	public MonsterController[] getMonsters()
	{
		return monsters;
	}

	public PlayerController[] getPlayers()
	{
		return players;
	}

	/**
	 * 通知战斗结束
	 */
	public void uninit()
	{
		if(isMonsterDead())
		{
			for (int i = 0; i < players.length; i++) 
			{
				PlayerBattleTmp pbt = (PlayerBattleTmp) players[i].getAttachment();
				if(pbt.isDead())
					continue;
				Bag bag = (Bag) players[i].getPlayer().getExtPlayerInfo("bag");
				bag.point += pbt.getBattlePoint();//加钱钱
				bag.sendAddGoods(players[i], null);
				players[i].sendGetGoodsInfo(players[i].getName()+" \u83b7\u5f97\u91d1\u5e01: "+pbt.getBattlePoint());
				
				Goods[] goodsList = pbt.getGoodsList();
				boolean flag = false;
				for (int j = 0; j < goodsList.length; j++) 
				{
					flag = bag.isCanAddGoodsToBag(players[i], goodsList[j]);
				}
				if(flag)
				{
					TaskInfo taskInfo = (TaskInfo) players[i].getPlayer().getExtPlayerInfo("taskInfo");
					for (int j = 0; j < goodsList.length; j++) 
					{
						if(taskInfo.getCurrentTaskSize() > 0)
						{
							if(taskInfo.onPlayerGotItem(goodsList[j], players[i]))
							{
								System.out.println("++++++++++++++++++++"+goodsList[j].name);
								bag.sendAddGoods(players[i], goodsList[j]);//加物品
								players[i].sendGetGoodsInfo(players[i].getName()+" \u83b7\u5f97\u7269\u54c1: |["+goodsList[j].name+"]#p:"+goodsList[j].id);
							}
						}
						else
						{
							bag.sendAddGoods(players[i], goodsList[j]);//加物品
							players[i].sendGetGoodsInfo(players[i].getName()+" \u83b7\u5f97\u7269\u54c1: |["+goodsList[j].name+"]#p:"+goodsList[j].id);
						}
					}
				}
				
				int level = players[i].getPlayer().level;
				players[i].addExp(pbt.getBattleExp());//加经验
				players[i].sendGetGoodsInfo(players[i].getName()+" \u83b7\u5f97\u7ecf\u9a8c: "+pbt.getBattleExp());
				
				if(players[i].getPlayer().level > level)
				{					
					TeamController team =  players[i].getTeam();				
					ByteBuffer buff = new ByteBuffer(25);
					buff.writeByte(1); //当前小组内
					buff.writeInt(players[i].getID());
					buff.writeInt(players[i].getPlayer().level);
					buff.writeInt(players[i].getPlayer().requireExp);
					buff.writeInt(players[i].expObj.levelExp);
					EquipSet es = (EquipSet) players[i].getPlayer().getExtPlayerInfo("equipSet");
					buff.writeInt(players[i].getPlayer().maxHitPoint+es.getTotalAtt("maxHitPoint"));
					buff.writeInt(players[i].getPlayer().maxMagicPoint+es.getTotalAtt("maxMagicPoint"));
					players[i].getPlayer().nextExp = players[i].expObj.levelExp;
					if(team != null)
					{
						team.dispatchMsg(SMsg.S_ROOM_PLAYER_LEVELUP, buff);
					}
					else
					{
						players[i].getNetConnection().sendMessage(new SMsg
								(SMsg.S_ROOM_PLAYER_LEVELUP,buff));
					}
				}
			}
		}
		
		for (int i = 0; i < monsterLength; i++)
		{
			monsters[i].setParent(room);
		}
		
		super.uninit();
	}
	
	public void checkDeadState()
	{
		if(!isMonsterDead() && !isPlayerDead())
			return;
		
		ByteBuffer buffer = new ByteBuffer(1);
		buffer.writeBoolean(true);
		dispatchMsg(SMsg.S_BATTLE_PLAYER_BATTLERESULT, buffer);
		
		isFinish = true;
	}
	
	public boolean isPlayerDead()
	{
		PlayerController[] players = getPlayers();
		for (int i = 0; i < players.length; i++)
		{
			if(!players[i].getAttachment().isDead())
				return false;
		}
		return true;
	}
	public boolean isMonsterDead()
	{
		int monsterLength = monsters.length;
		for (int i = 0; i < monsterLength; i++)
		{
			if(!monsters[i].getAttachment().isDead())
				return false;
		}
		return true;
	}
	
	public void dispatchIsBattleWithoutRoom(boolean isBattle,PlayerController target)
	{
		if(target == null)
		{	
			PlayerController player = null;
			int length = players.length;
			for(int i = 0 ; i < length ; i ++)
			{
				if(players[i] != null)
				{
					player = players[i];
					break;
				}
			}
			
			if(player == null)
				return;
			
			super.dispatchIsBattleWithoutRoom(isBattle,player);
		}
		else
		{
			super.dispatchIsBattleWithoutRoom(isBattle, target);
		}
	}
	
	/*		if(teamNO == BattleController.TEAM1) //瞄准己方 
	{
	    if(targetIndex >= playerLength)
			return;

		if(skill.targetType != 1) 
			return;
		
		skill.processSkill(target,players[targetIndex]);
	}
	else if(teamNO == BattleController.TEAM2)  //瞄准敌方
	{
		if(targetIndex >= monsterLength)
			return;
		
		if(skill.targetType != 2) //2：敌方
			return;
			
		skill.processSkill(target, monsters[targetIndex]);
	}*/
}
