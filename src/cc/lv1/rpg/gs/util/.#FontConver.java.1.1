package cc.lv1.rpg.gs.util;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;

import vin.rabbit.util.Utils;
import vin.rabbit.util.collection.i.List;
import vin.rabbit.util.collection.impl.ArrayList;
import cc.lv1.rpg.gs.GameServer;
import cc.lv1.rpg.gs.data.DataFactory;

public class FontConver 
{
	public static String complTosimple(String compl) 
	{
		if (DataFactory.COMPLEX.equals(DataFactory.fontVer))
			return compl;

		String str = "";
		for (int i = 0; i < compl.length(); i++) 
		{
			if (returnComplex().indexOf(compl.charAt(i)) != -1)
				str += returnSimple().charAt(
						returnComplex().indexOf(compl.charAt(i)));
			else
				str += compl.charAt(i);
		}
		return str;
	}

	public static String simpleToCompl(String simple) 
	{
		if (DataFactory.SIMPLE.equals(DataFactory.fontVer))
			return simple;

		String s = returnSimple();
		String c = returnComplex();
		if (s == null || c == null)
			return simple;
		if (s.equals("") || c.equals(""))
			return simple;
		String str = "";
		for (int i = 0; i < simple.length(); i++) 
		{
			if (s.indexOf(simple.charAt(i)) != -1)
				str += c.charAt(s.indexOf(simple.charAt(i)));
			else
				str += simple.charAt(i);
		}
		return str;
	}

	public static String testSimpleToCompl(String sim)
	{
		String s = simple;
		String c = complex;
		if (s == null || c == null)
			return sim;
		if (s.equals("") || c.equals(""))
			return sim;
		String str = "";
		for (int i = 0; i < sim.length(); i++) 
		{
			if (s.indexOf(sim.charAt(i)) != -1)
				str += c.charAt(s.indexOf(sim.charAt(i)));
			else
				str += sim.charAt(i);
		}

		return str;
	}

	public static String returnSimple() 
	{
		Object obj = DataFactory.getInstance().getAttachment(
				DataFactory.SIMPLE_FONT);
		return obj != null ? (String) obj : null;
	}

	public static String returnComplex() 
	{
		Object obj = DataFactory.getInstance().getAttachment(
				DataFactory.COMPLEX_FONT);
		return obj != null ? (String) obj : null;
	}

	static String simple = "";
	static String complex = "";

	public static void load(String fontStorageStr) 
	{
		fontStorageStr = Utils.readFile2(fontStorageStr);
		String[] fonts = Utils.split(fontStorageStr, Utils.LINE_SEPARATOR);
		for (int i = 0; i < fonts.length; i++) {
			String[] strs = Utils.split(fonts[i], "=");
			if (DataFactory.SIMPLE.equals(strs[0]))
				simple = strs[1];
			if (DataFactory.COMPLEX.equals(strs[0]))
				complex = strs[1];
		}
	}
	
	private static void loadAndWrite(String inPath,String outPath)
	{
		File file = new File(inPath);
		File[] txt = file.listFiles();
		for (int i = 0; i < txt.length; i++)
		{
			try 
			{
				BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(txt[i]),"GBK"));
				String line = "";
				StringBuffer sb = new StringBuffer();
				List list = new ArrayList();
				while((line = br.readLine()) != null)
				{
					list.add(line);
					list.add(Utils.LINE_SEPARATOR);
				}
				for (int j = 0; j < list.size(); j+=2) 
				{
					sb.append(list.get(j).toString());
				}
				StringBuffer buffer = new StringBuffer(testSimpleToCompl(sb.toString()));
				write(buffer, txt[i].getName(), outPath);
			} 
			catch (Exception e) 
			{
				e.printStackTrace();
			}
		}
	}

	private static void write(StringBuffer node, String filename, String outPath)
	{
		try 
		{
			File file = new File(outPath + filename);
			FileWriter fw = new FileWriter(file);
			BufferedWriter bw = new BufferedWriter(fw);
			bw.write(node.toString());
			bw.flush();
			bw.close();
			fw.close();
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
	}

	public static void main(String[] args)
	{
		String fontStorageStr = "E:\\fontStorage.txt";
		load(fontStorageStr);
//		String str = "号外";
//		long t1 = System.currentTimeMillis();
//		str = testSimpleToCompl(str);
//		long t2 = System.currentTimeMillis();
//		System.out.println(str);
//		System.out.println(t2 - t1);
		
		String inPath = "E:\\in\\";
		String outPath = "E:\\out\\";
		loadAndWrite(inPath, outPath);
	}
}