package cc.lv1.rpg.gs.load.impl;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

import vin.rabbit.util.Utils;
import vin.rabbit.util.collection.i.List;
import vin.rabbit.util.collection.i.Map;
import vin.rabbit.util.collection.impl.ArrayList;
import vin.rabbit.util.collection.impl.HashMap;
import vin.rabbit.util.xml.XMLNode;
import cc.lv1.rpg.gs.GameServer;
import cc.lv1.rpg.gs.WorldManager;
import cc.lv1.rpg.gs.dao.DatabaseAccessor;
import cc.lv1.rpg.gs.data.DataFactory;
import cc.lv1.rpg.gs.data.Exp;
import cc.lv1.rpg.gs.data.PetExp;
import cc.lv1.rpg.gs.data.TaskManager;
import cc.lv1.rpg.gs.entity.controller.AreaController;
import cc.lv1.rpg.gs.entity.controller.MonsterGroupController;
import cc.lv1.rpg.gs.entity.controller.NpcController;
import cc.lv1.rpg.gs.entity.controller.RoomController;
import cc.lv1.rpg.gs.entity.impl.BaseFlayer;
import cc.lv1.rpg.gs.entity.impl.BoxDropProp;
import cc.lv1.rpg.gs.entity.impl.Goods;
import cc.lv1.rpg.gs.entity.impl.Monster;
import cc.lv1.rpg.gs.entity.impl.MonsterAI;
import cc.lv1.rpg.gs.entity.impl.MonsterDropProp;
import cc.lv1.rpg.gs.entity.impl.NPC;
import cc.lv1.rpg.gs.entity.impl.Pet;
import cc.lv1.rpg.gs.entity.impl.PetUpRule;
import cc.lv1.rpg.gs.entity.impl.SShop;
import cc.lv1.rpg.gs.entity.impl.Shop;
import cc.lv1.rpg.gs.entity.impl.Task;
import cc.lv1.rpg.gs.entity.impl.battle.effect.FlashEffect;
import cc.lv1.rpg.gs.entity.impl.battle.effect.TimeEffect;
import cc.lv1.rpg.gs.entity.impl.battle.skill.ActiveSkill;
import cc.lv1.rpg.gs.entity.impl.battle.skill.PassiveSkill;
import cc.lv1.rpg.gs.entity.impl.battle.skill.PetSkill;
import cc.lv1.rpg.gs.entity.impl.goods.GoodsEquip;
import cc.lv1.rpg.gs.entity.impl.goods.GoodsProp;
import cc.lv1.rpg.gs.entity.impl.goods.GoodsSynt;
import cc.lv1.rpg.gs.gui.MainFrame;
import cc.lv1.rpg.gs.load.i.ILoader;
/**
 * 本地资源加载器
 * @author dxw
 *
 */
public class LocalDataLoader implements ILoader
{ 

	private GameServer gameserver = null;
	
	private String monsterStr = GameServer.getAbsolutePath()+"data/entity/monster.txt";
	
	private String monsterGroupStr = GameServer.getAbsolutePath()+"data/entity/monsterGroup.txt";
	
	private String npcStr = GameServer.getAbsolutePath()+"data/entity/npc.txt";
	
	private String worldStr = GameServer.getAbsolutePath()+"data/world.txt";

	private String npcDialogStr = GameServer.getAbsolutePath()+"data/npc_dialog/npc";

	private String nativityStr = GameServer.getAbsolutePath()+"data/nativity.txt";
	
	private String equipmentStr = GameServer.getAbsolutePath()+"data/entity/equipment.txt";
	
	private String propStr = GameServer.getAbsolutePath()+"data/entity/prop.txt";
	
	private String shopStr = GameServer.getAbsolutePath()+"data/entity/shop";

	private String timeEffStr = GameServer.getAbsolutePath()+"data/entity/effect1.txt";
	
	private String flashEffStr = GameServer.getAbsolutePath()+"data/entity/effect2.txt";
	
	private String aSkillStr = GameServer.getAbsolutePath()+"data/entity/skills1.txt";
	
	private String pSkillStr = GameServer.getAbsolutePath()+"data/entity/skills2.txt";
	
	private String petSkillStr = GameServer.getAbsolutePath()+"data/entity/petSkill.txt";
	
	private String monsterAiStr = GameServer.getAbsolutePath()+"data/entity/monsterAI.txt";
	
	private String taskStr = GameServer.getAbsolutePath()+"data/task";
	
	private String expStr = GameServer.getAbsolutePath()+"data/exp.txt";
	
	private String petExpStr = GameServer.getAbsolutePath()+"data/petExp.txt";
	
	private String equipSShopStr = GameServer.getAbsolutePath()+"data/equipSShop.txt";
	
	private String equipDShopStr = GameServer.getAbsolutePath()+"data/equipDShop.txt";
	
	private String monsterDropPropStr = GameServer.getAbsolutePath()+"data/entity/monsterDropProp.txt";
	
	private String taskDropPropStr = GameServer.getAbsolutePath()+"data/entity/taskDropProp.txt";
	
	private String boxDropPropStr = GameServer.getAbsolutePath()+"data/entity/boxDropProp.txt";
	
	private String boxStr = GameServer.getAbsolutePath()+"data/entity/box";
	
	private String baseFlyerStr = GameServer.getAbsolutePath()+"data/baseflyer.txt";
	
	private String petStr = GameServer.getAbsolutePath()+"data/entity/pet.txt";
	
	private String petUpStr = GameServer.getAbsolutePath()+"data/entity/petUp/pet";
	
	
	public void setAttachment(Object obj)
	{
		if(obj instanceof GameServer)
			gameserver = (GameServer)obj;
		else
			MainFrame.println("unknown attachment!");
	}

	/**
	 * 加载.........
	 * 
	 */
	public void loading()
	{
		
		loadEffect();
		MainFrame.println("load Effect success!!");
		
		loadSkill();
		MainFrame.println("load Skill success!!");
		
		loadWorldMap();
		MainFrame.println("load WorldMap success!!");
		
		loadGoodsProp();
		MainFrame.println("load prop success!!");
		
		loadGoodsEquip();
		MainFrame.println("load equipment success!!");
		
		loadShop();
		MainFrame.println("load shop success!!");

		loadExtShop();
		MainFrame.println("load ext shop success!!");
		
		loadNpc();
		MainFrame.println("load Npc success!!");
		
		loadDropProp();
		MainFrame.println("load dropProp success!!");
		
		loadMonster();
		MainFrame.println("load monster success!!");
		
		loadMonsterGroup();
		MainFrame.println("load monsterGroup success!!");
		
		loadNativity();
		MainFrame.println("load nativity success!!");
		
		loadTask();
		MainFrame.println("load task success!!");
		
		loadExp();
		MainFrame.println("load exp success!!");
		
		loadBaseFlyer();
		MainFrame.println("load BaseFlyer success!!");
		
		loadPet();
		MainFrame.println("load Pet succes!!");
	}

	private void loadPet()
	{
		try
		{
			ArrayList list = Utils.loadFileVariables(petStr, Pet.class);
		
			for(int i = 0 ; i < list.size() ; i ++)
			{
				Pet pet = (Pet)list.get(i);
				Map upMap = new HashMap();
				ArrayList upList = Utils.loadFileVariables(petUpStr+pet.id+".txt", PetUpRule.class);
				for (int j = 0; j < upList.size(); j++) 
				{
					PetUpRule pur = (PetUpRule) upList.get(j);
					upMap.put(pur.level, pur);
				}
				pet.setUpMap(upMap);
				DataFactory.getInstance().putGameObject(pet);
			}

		} 
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}



	private void loadBaseFlyer()
	{
		try
		{
			ArrayList list = Utils.loadFileVariables(baseFlyerStr, BaseFlayer.class);
		
			Map bfMap = new HashMap(10);
			for(int i = 0 ; i < list.size() ; i ++)
			{
				BaseFlayer bf = (BaseFlayer)list.get(i);
				bfMap.put(bf.id, bf);
			}
			DataFactory.getInstance().putAttachment(DataFactory.ATTACH_NPC_FLYER, bfMap);

		} 
		catch (Exception e)
		{
			e.printStackTrace();
		}
		
	}

	private void loadExp()
	{
		
		try
		{
			ArrayList list = Utils.loadFileVariables(expStr, Exp.class);
			
			Map expMap = new HashMap();
			
			for(int i = 0 ; i < list.size() ; i ++)
			{
				Exp exp = (Exp)list.get(i);
				expMap.put(exp.level, exp);
			}
			DataFactory.getInstance().putAttachment(DataFactory.ATTACH_EXP, expMap);
			
			ArrayList petExp = Utils.loadFileVariables(petExpStr, PetExp.class);
			Map petExpMap = new HashMap();
			
			for(int i = 0 ; i < petExp.size() ; i ++)
			{
				PetExp exp = (PetExp)petExp.get(i);
				petExpMap.put(exp.level, exp);
			}
			DataFactory.getInstance().putAttachment(DataFactory.ATTACH_PET_EXP, petExpMap);
		} 
		catch (Exception e)
		{
			e.printStackTrace();
		} 
	}

	/**
	 * 加载效果
	 */

	private void loadEffect()
	{
		DataFactory dataFactory = DataFactory.getInstance();
		try
		{
			ArrayList timeEffects = Utils.loadFileVariables(timeEffStr, TimeEffect.class);
			
			for(int i = 0 ; i < timeEffects.size() ; i ++)
			{
				TimeEffect timeEffect = (TimeEffect)timeEffects.get(i);
				dataFactory.putGameObject(timeEffect);
			}
			
			
			ArrayList flashEffects = Utils.loadFileVariables(flashEffStr, FlashEffect.class);
			
			for(int i = 0 ; i < flashEffects.size() ; i ++)
			{
				FlashEffect flashEffect = (FlashEffect)flashEffects.get(i);
				dataFactory.putGameObject(flashEffect);
			}
			
		} 
		catch (InstantiationException e)
		{
			e.printStackTrace();
		} 
		catch (IllegalAccessException e)
		{
			e.printStackTrace();
		}
	}
	
	private void loadSkill()
	{
		DataFactory dataFactory = DataFactory.getInstance();
		try
		{
			ArrayList askills =  Utils.loadFileVariables(aSkillStr,ActiveSkill.class);
			for(int i = 0 ; i < askills.size() ; i ++)
			{
				ActiveSkill aSkill = (ActiveSkill)askills.get(i);
				dataFactory.putGameObject(aSkill);
				dataFactory.addSkill(aSkill);
			}
			
			ArrayList pkills =  Utils.loadFileVariables(pSkillStr,PassiveSkill.class);
			for(int i = 0 ; i < pkills.size() ; i ++)
			{
				PassiveSkill pSkill = (PassiveSkill)pkills.get(i);
				dataFactory.putGameObject(pSkill);
				dataFactory.addSkill(pSkill);
			}
			
			ArrayList petkills =  Utils.loadFileVariables(petSkillStr,PetSkill.class);
			for(int i = 0 ; i < petkills.size() ; i ++)
			{
				PetSkill petSkill = (PetSkill)petkills.get(i);
				dataFactory.putGameObject(petSkill);
				dataFactory.addPetSkill(petSkill);
			}
		} 
		catch (InstantiationException e)
		{
			e.printStackTrace();
		} 
		catch (IllegalAccessException e)
		{
			e.printStackTrace();
		}
		
		
	}
	
	/**
	 * 加载世界（区域，房间）
	 */
	private void loadWorldMap()
	{
		XMLNode worldNode = Utils.getXMLNode(worldStr);
        
		XMLNode roomsNode = worldNode.getSubNode("rooms");
		ArrayList roomsList = roomsNode.getSubNodes();
		int roomsSize = roomsList.size();
		
		RoomController [] roomControllers = new RoomController[roomsSize];

		for(int i = 0 ; i < roomsSize ; i ++) 
		{
			XMLNode node = (XMLNode)roomsList.get(i);
			
			roomControllers[i] = new RoomController();
			roomControllers[i].init(node);
			roomControllers[i].setWorld(gameserver.getWorldManager());
			DataFactory.getInstance().putGameObject(roomControllers[i]);
		}
		
		
		XMLNode areaNode = worldNode.getSubNode("areas");
		
		ArrayList areaList = areaNode.getSubNodes();
		int areaSize = areaList.size();
		
		AreaController [] areaControllers = new AreaController[areaSize];
		
		for(int i = 0 ; i < areaSize ;i ++) 
		{
			XMLNode node = (XMLNode)areaList.get(i);
			areaControllers[i] = new AreaController();
			areaControllers[i].setParent(gameserver.getWorldManager());
			areaControllers[i].init(node);
			areaControllers[i].setSmailWorld(areaControllers);
		}
		gameserver.getWorldManager().setAreaController(areaControllers);
	
		for (int i = 0; i < areaControllers.length; i++)
		{
			areaControllers[i].ExitLinking();
		}
		
		
		
	}
	
	/**
	 * 加载NPC到服务器
	 */
	private void loadNpc()
	{
		try
		{
			WorldManager world = gameserver.getWorldManager();
			ArrayList npcs = Utils.loadFileVariables(npcStr, NPC.class);
			int npcSize = npcs.size();
 
			NpcController[] npcControllers = new NpcController[npcSize];
			
			for(int i = 0 ; i < npcSize ; i ++)
			{
				NPC npc = (NPC)npcs.get(i);
				npcControllers[i] = new NpcController();
				npcControllers[i].setWorld(world);
				npcControllers[i].setNpc(npc);
				if(!npc.shopId.equals("0") && !npc.shopId.trim().equals("0"))
				{
					String[] strs = Utils.split(npc.shopId, ":");
					for (int j = 0; j < strs.length; j++) 
					{
						int id = Integer.parseInt(strs[j]);
						Shop shop = (Shop) DataFactory.getInstance().getGameObject(id);
						npcControllers[i].setShop(shop);
					}
				}
				
		        AreaController area = (AreaController)world.getAreaById(npc.areaId);
				if(area != null)
				{
					RoomController room = area.getRoomById(npc.roomId);
					if(room != null)
					{
						room.addNpcList(npcControllers[i]);
						npcControllers[i].setParent(room);
					}
				}	
				File file = new File(npcDialogStr+npc.id+".txt");
				XMLNode dialog;
				if(file.exists())
				{
					dialog = Utils.getXMLNode(file);	
				}
				else
				{
				    dialog = Utils.getXMLNode(npcDialogStr+"default.txt");	
				}		
				npcControllers[i].parseDialog(dialog);
				
			}	
		} catch (Exception e)
		{
			e.printStackTrace();
			System.out.println("load npc error:"+e.getMessage());
		}

	}

	public void loadDropProp()
	{
		try
		{
			DataFactory datafactory = DataFactory.getInstance(); 
			
			ArrayList list1 = Utils.loadFileVariables(monsterDropPropStr, MonsterDropProp.class);
			for (int i = 0; i < list1.size(); i++) 
			{
				MonsterDropProp mdp = (MonsterDropProp) list1.get(i);
				datafactory.putGameObject(mdp);
			}
			
			ArrayList list2 = Utils.loadFileVariables(taskDropPropStr, MonsterDropProp.class);
			for (int i = 0; i < list2.size(); i++) 
			{
				MonsterDropProp mdp = (MonsterDropProp) list2.get(i);
				datafactory.putGameObject(mdp);
			}
			
			ArrayList list3 = Utils.loadFileVariables(boxDropPropStr,BoxDropProp.class);
			for (int i = 0; i < list3.size(); i++) 
			{
				BoxDropProp bdp = (BoxDropProp) list3.get(i);
				File file = new File(boxStr);
				File[] files = file.listFiles();
				List ids = new ArrayList();
				List counts = new ArrayList();
				for (int j = 0; j < files.length; j++) 
				{
					if(!files[j].getName().startsWith("box"))
						continue;
					BufferedReader br = new BufferedReader(new FileReader(new File(files[j].getPath())));
					br.readLine();
					br.readLine();
					String line;
					while((line = br.readLine()) != null)
					{
						
						String[] strs = Utils.split(line, "\t");
						int dropId = Integer.parseInt(strs[0]);
						if(bdp.id != dropId)
							continue;
						if(strs[1].equals("0"))
							continue;
						ids.add(strs[1]);
						try
						{
						counts.add(strs[3]);
						}
						catch(Exception e)
						{
							System.err.println(line);
							counts.add(1);
						}
					}
				}
				bdp.setDefault(ids,counts);
				datafactory.addBoxDropProp(bdp);
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("load dropProp error:"+e.getMessage());
		} 
	}
	
	
	/**
	 * 加载怪物
	 */
	public void loadMonster()
	{
		try
		{
			ArrayList list = Utils.loadFileVariables(monsterStr, Monster.class);
			ArrayList listAI = Utils.loadFileVariables(monsterAiStr, MonsterAI.class);
			
			DataFactory datafactory = DataFactory.getInstance(); 
			int monsterSize = list.size();
			
			for(int i = 0 ; i < monsterSize ; i ++)
			{
				Monster monster = (Monster)list.get(i);
				monster.updateMoreValue();
				for (int j = 0; j < listAI.size(); j++) 
				{
					MonsterAI monsterAI = (MonsterAI)listAI.get(j);
					if(monsterAI.monsterId == monster.id)
					{
						monster.setMonsterAI(monsterAI);
					}
				}
				MonsterDropProp mdp = null;
				if(monster.normalDropRate != 0)
				{
					mdp = (MonsterDropProp) datafactory.getGameObject(monster.normalDropRate);
					monster.setMonsterDropProp(mdp);
				}
				if(monster.questDropRate != 0)
				{
					mdp = (MonsterDropProp) datafactory.getGameObject(monster.questDropRate);
					monster.setTaskDropProp(mdp);
				}
				datafactory.putGameObject(monster);
			}
			
		}
		catch (InstantiationException e)
		{
			e.printStackTrace();
			System.out.println("load monster error:"+e.getMessage());
		} 
		catch (IllegalAccessException e)
		{
			e.printStackTrace();
			System.out.println("load monster error:"+e.getMessage());
		}
	}
	
	/**
	 * 加载怪物组
	 */
	private void loadMonsterGroup()
	{
		try
		{
			ArrayList list = Utils.loadFileVariables(monsterGroupStr, MonsterGroupController.class);			
			int size = list.size();
			DataFactory datafactory = DataFactory.getInstance();
			for(int i = 0 ; i < size ; i++)
			{
				MonsterGroupController monsterGroupController	= (MonsterGroupController)list.get(i);
				datafactory.putGameObject(monsterGroupController);
			}
			
			WorldManager world = gameserver.getWorldManager();
			
			AreaController [] areas = world.getAreaControllers();
			int areaLength = areas.length;
			for(int i = 0 ; i < areaLength ; i++)
			{
				RoomController [] rooms = areas[i].getRooms();
				int roomLength = rooms.length;
				
				for(int j = 0 ; j < roomLength ; j ++)
				{
					ArrayList nodeList= rooms[j].getMonstersNode();
					
					if(nodeList == null)
						continue;
					
					int groupSize = nodeList.size();
					for(int k = 0 ; k < groupSize ; k++)
					{
						XMLNode xmlnode = (XMLNode)nodeList.get(k);
						int groupId = Integer.parseInt(xmlnode.getAttributeValue("id"));
						int groupX = Integer.parseInt(xmlnode.getAttributeValue("x"));
						int groupY = Integer.parseInt(xmlnode.getAttributeValue("y"));
						
						MonsterGroupController mc = (MonsterGroupController)datafactory.getGameObject(groupId);
						if(mc == null)
						{
							System.out.println("MonsterGroupController "+groupId+" can not find");
							continue;
						}
						MonsterGroupController nMc = new MonsterGroupController();
						nMc.areaId = areas[i].id;
						nMc.roomId = rooms[j].id;
						nMc.x = groupX;
						nMc.y = groupY;
						nMc.setParent(rooms[j]);
						mc.copyTo(nMc);
						DatabaseAccessor da = gameserver.getDatabaseAccessor();
						nMc.objectIndex = da.getGoodsObjIndex();
						rooms[j].addMonsterGroupList(nMc);
					}
					
				}
			}
		} 
		catch (InstantiationException e)
		{
			e.printStackTrace();
			System.out.println("load monsterGroup error:"+e.getMessage());
		} 
		catch (IllegalAccessException e)
		{
			e.printStackTrace();
			System.out.println("load monsterGroup error:"+e.getMessage());
		}
	}
	
	/**
	 * 加载装备 
	 */
	public void loadGoodsEquip()
	{
		try 
		{
			ArrayList equips = Utils.loadFileVariables(equipmentStr, GoodsEquip.class);
			int size = equips.size();
			for (int i = 0; i < size; i++) 
			{
				GoodsEquip goods = (GoodsEquip)equips.get(i);
				DataFactory.getInstance().putGameObject(goods);
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
			System.out.println("load equip error:"+e.getMessage());
		}
	}
	
	/**
	 * 加载道具
	 */
	public void loadGoodsProp()
	{
		try {
			ArrayList props = Utils.loadFileVariables(propStr, GoodsProp.class);
			int size = props.size();
			for (int i = 0; i < size; i++) 
			{
				GoodsProp goods = (GoodsProp)props.get(i);
				goods.quality = (goods.minQuality == goods.maxQuality?goods.minQuality:0);
				DataFactory.getInstance().putGameObject(goods);
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("load prop error:"+e.getMessage());
		}
	}
	
	private void loadTask()
	{
		File file = new File(taskStr);
		File [] taskfiles = file.listFiles();
		
		for(int i = 0 ; i < taskfiles.length ; i ++)
		{
			if(taskfiles[i] == null)
				continue;
			
			if(!taskfiles[i].toString().endsWith("txt"))
				continue;
			
			XMLNode taskNode = Utils.getXMLNode(taskfiles[i]);
			Task task = new Task();
			task.setWorld(gameserver.getWorldManager());
			task.parseTask(taskNode);
			task.initial();
			
			TaskManager.getInstance().putTask(task);
		}
	}
	
	/**
	 * 加载商店
	 */
	public void loadShop()
	{
		try
		{
			String MATCH = "shop\\d++\\.txt";
			File file = new File(shopStr);
			File[] files = file.listFiles();
			for (int i = 0; i < files.length; i++) 
			{
				if(!files[i].getName().matches(MATCH))
					continue;
				List goodsList = new ArrayList(200);
				BufferedReader br = new BufferedReader(new FileReader(new File(files[i].getPath())));
				br.readLine();
				br.readLine();
				String line;
				HashMap buyRate = new HashMap();
				HashMap saleRate = new HashMap();
				HashMap honourPoint = new HashMap();
				while((line = br.readLine()) != null)
				{
					String[] gos = Utils.split(line, "\t");
					int goodsId = Integer.parseInt(gos[0]);
					int honour = 0;
					if(gos.length == 5)
					{
						honour = Integer.parseInt(gos[4]);
					}
					Goods goods = (Goods) DataFactory.getInstance().getGameObject(goodsId);
					Goods newGoods = null;
					if(goods instanceof GoodsEquip)
					{
						GoodsEquip equip = (GoodsEquip) goods;
						if(files[i].getName().equals("shop1000000000.txt") || files[i].getName().equals("shop2000000000.txt"))
						{
							if(equip.taskColor == -1)
								newGoods = (Goods) Goods.cloneObject(goods);
							else
								newGoods = equip.makeNewBetterEquip(equip.taskColor);
						}
						else
						{
							if(equip.equipType == 0)
								newGoods = equip.makeNewBetterEquip(0);
							else
								newGoods = (Goods) Goods.cloneObject(goods);
						}
					}
					else if(goods instanceof GoodsProp)
						newGoods = (Goods) Goods.cloneObject(goods);
					if(newGoods == null)
					{
						System.out.println("goods is null:"+goodsId);
						continue;
					}
					goodsList.add(newGoods);
					if(files[i].getName().equals("shop1000000000.txt"))
						buyRate.put(goodsId, gos[2]);
					else
					{
						saleRate.put(goodsId, gos[2]);
//						System.out.println(goodsId+"-"+files[i].getName()+"-"+gos[2]);
						buyRate.put(goodsId, gos[3]);
					}
					honourPoint.put(goodsId, honour);
				}
				
				String str = files[i].getName().substring(4);
				int shopId = Integer.parseInt(str.substring(0, str.indexOf(".")));
				Shop shop = new Shop(shopId,goodsList,saleRate,buyRate,honourPoint);
				DataFactory.getInstance().putGameObject(shop);
				GameServer.getInstance().getWorldManager().setShopList(shop);
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
			System.out.println("load shop error:"+e.getMessage());
		}
	}

	private void loadExtShop()
	{
		try
		{
			ArrayList list1 = Utils.loadFileVariables(equipSShopStr, GoodsSynt.class);
			ArrayList list2 = Utils.loadFileVariables(equipDShopStr, GoodsSynt.class);

			for(int i = 0 ; i < list1.size() ; i ++)
			{
				GoodsSynt gs = (GoodsSynt)list1.get(i);
				SShop.getShop().addEquipSynt(gs);
			}
			
			for (int i = 0; i < list2.size(); i++)
			{
				GoodsSynt gs = (GoodsSynt)list2.get(i);
				SShop.getShop().addEquipDisa(gs);
			}

			SShop.getShop().setWorld(gameserver.getWorldManager());
		} 
		catch (Exception e)
		{
			e.printStackTrace();
		}

	}
	
	/**
	 * 读取出生初始化配置文件信息
	 */
	private void loadNativity()
	{
		XMLNode nativityNode = Utils.getXMLNode(nativityStr);
		ArrayList nativitys = nativityNode.getSubNodes();
		DataFactory dataFactory = DataFactory.getInstance();
		dataFactory.putAttachment(DataFactory.ATTACH_NATIVITY, nativitys);
	}
	

}
