package cc.lv1.rpg.gs.load.impl;

import vin.rabbit.util.Utils;
import vin.rabbit.util.collection.impl.ArrayList;
import vin.rabbit.util.xml.XMLNode;
import cc.lv1.rpg.gs.GameServer;
import cc.lv1.rpg.gs.WorldManager;
import cc.lv1.rpg.gs.data.DataFactory;
import cc.lv1.rpg.gs.entity.controller.AreaController;
import cc.lv1.rpg.gs.entity.controller.MonsterGroupController;
import cc.lv1.rpg.gs.entity.controller.NpcController;
import cc.lv1.rpg.gs.entity.controller.RoomController;
import cc.lv1.rpg.gs.entity.impl.Monster;
import cc.lv1.rpg.gs.gui.MainFrame;
import cc.lv1.rpg.gs.load.i.ILoader;
/**
 * 本地资源加载器
 * @author dxw
 *
 */
public class LocalDataLoader implements ILoader
{

	private GameServer gameserver = null;
	
	private String monsterStr = GameServer.getAbsolutePath()+"data\\entity\\monster.txt";
	
	private String monsterGroupStr = GameServer.getAbsolutePath()+"data\\entity\\monsterGroup.txt";
	
	private String npcStr = GameServer.getAbsolutePath()+"data\\entity\\npc.txt";
	
	private String worldStr = GameServer.getAbsolutePath()+"data\\world.txt";

	
	private String npcDialog = GameServer.getAbsolutePath()+"data\\npc_dialog\\";

	
	private String nativityStr = GameServer.getAbsolutePath()+"data\\nativity.txt";


	public void setAttachment(Object obj)
	{
		if(obj instanceof GameServer)
			gameserver = (GameServer)obj;
		else
			MainFrame.println("unknown attachment!");
	}

	public void loading()
	{
		loadWorldMap();
		MainFrame.println("load WorldMap success!!");

		loadNpc();
		MainFrame.println("load Npc success!!");
		
		loadMonster();
		MainFrame.println("load monster success!!");
		
		loadMonsterGroup();
		MainFrame.println("load monsterGroup success!!");
		
		loadNativity();
		MainFrame.println("load nativity success!!");
	}

	private void loadWorldMap()
	{
		XMLNode worldNode = Utils.getXMLNode(worldStr);

		XMLNode roomsNode = worldNode.getSubNode("rooms");
		ArrayList roomsList = roomsNode.getSubNodes();
		int roomsSize = roomsList.size();
		
		RoomController [] roomControllers = new RoomController[roomsSize];

		for(int i = 0 ; i < roomsSize ; i ++) 
		{
			XMLNode node = (XMLNode)roomsList.get(i);
			
			roomControllers[i] = new RoomController();
			roomControllers[i].init(node);
			roomControllers[i].setWorld(gameserver.getWorldManager());
			DataFactory.getInstance().putGameObject(roomControllers[i]);
		}
		
		
		XMLNode areaNode = worldNode.getSubNode("areas");
		ArrayList areaList = areaNode.getSubNodes();
		int areaSize = areaList.size();
		
		AreaController [] areaControllers = new AreaController[areaSize];
		
		for(int i = 0 ; i < areaSize ;i ++) 
		{
			XMLNode node = (XMLNode)areaList.get(i);
			areaControllers[i] = new AreaController();
			areaControllers[i].setParent(gameserver.getWorldManager());
			areaControllers[i].init(node);
		}
		gameserver.getWorldManager().setAreaController(areaControllers);
	
		for (int i = 0; i < areaControllers.length; i++)
		{
			areaControllers[i].ExitLinking();
		}

		//test(areaControllers);
	}
	
	/**
	 * 加载NPC到服务器
	 */
	private void loadNpc()
	{

		WorldManager world = gameserver.getWorldManager();
		XMLNode npcNode = Utils.getXMLNode(npcStr);
		ArrayList npcs = npcNode.getSubNodes();
		int size = npcs.size();
		NpcController[] npcControllers = new NpcController[size];
		for (int i = 0; i < size; i++) 
		{
			XMLNode node = (XMLNode) npcs.get(i);
	        npcControllers[i] = new NpcController();
	        npcControllers[i].setWorld(gameserver.getWorldManager());
	        npcControllers[i].init(node);
	        AreaController area = (AreaController)world.getAreaById(Integer.parseInt(node.getAttributeValue("areaId")));
			if(area != null)
			{
				RoomController room = area.getRoomById(Integer.parseInt(node.getAttributeValue("roomId")));
				if(room != null)
				{
					room.addNpcList(npcControllers[i]);
					npcControllers[i].setParent(room);
				}
			}
			//把NPC的对话文件加载到服务器
			//XMLNode dialog = Utils.getXMLNode(npcDialog+node.getAttributeValue("id")+".txt");	
			//npcControllers[i].parseDialog(dialog);
		}

	}

	
	
	
	public void loadMonster()
	{
		try
		{
			ArrayList list = Utils.loadFileVariables(monsterStr, Monster.class);
			
			DataFactory datafactory = DataFactory.getInstance(); 
			int monsterSize = list.size();
			for(int i = 0 ; i < monsterSize ; i ++)
			{
				Monster monster = (Monster)list.get(i);
				datafactory.putGameObject(monster);
			}
		}
		catch (InstantiationException e)
		{
			e.printStackTrace();
		} 
		catch (IllegalAccessException e)
		{
			e.printStackTrace();
		}
	}
	
	private void loadMonsterGroup()
	{
		try
		{
			ArrayList list = Utils.loadFileVariables(monsterGroupStr, MonsterGroupController.class);			
			int size = list.size();
			DataFactory datafactory = DataFactory.getInstance();
			for(int i = 0 ; i < size ; i++)
			{
				MonsterGroupController monsterGroupController	= (MonsterGroupController)list.get(i);
				datafactory.putGameObject(monsterGroupController);
			}
			
			WorldManager world = gameserver.getWorldManager();
			
			AreaController [] areas = world.getAreaControllers();
			int areaLength = areas.length;
			for(int i = 0 ; i < areaLength ; i++)
			{
				RoomController [] rooms = areas[i].getRooms();
				int roomLength = rooms.length;
				for(int j = 0 ; j < roomLength ; j ++)
				{
					ArrayList nodeList= rooms[j].getMonstersNode();
					
					if(nodeList == null)
						continue;
					
					int groupSize = nodeList.size();
					for(int k = 0 ; k < groupSize ; k++)
					{
						XMLNode xmlnode = (XMLNode)nodeList.get(k);
						int groupId = Integer.parseInt(xmlnode.getAttributeValue("id"));
						int groupX = Integer.parseInt(xmlnode.getAttributeValue("x"));
						int groupY = Integer.parseInt(xmlnode.getAttributeValue("y"));
						
						MonsterGroupController mc = (MonsterGroupController)datafactory.getGameObject(groupId);
						if(mc == null)
						{
							System.out.println("MonsterGroupController "+groupId+" can not find");
							continue;
						}
						MonsterGroupController nMc = new MonsterGroupController();
						nMc.areaId = areas[i].id;
						nMc.roomId = rooms[j].id;
						nMc.x = groupX;
						nMc.y = groupY;
						nMc.setParent(rooms[j]);
						mc.copyTo(nMc);
						rooms[j].addMonsterGroupList(nMc);
					}
					
				}
			}
		} 
		catch (InstantiationException e)
		{
			e.printStackTrace();
		} 
		catch (IllegalAccessException e)
		{
			e.printStackTrace();
		}
	}
	

	


	
	/**
	 * 读取出生初始化配置文件信息
	 */
	private void loadNativity()
	{
		XMLNode nativityNode = Utils.getXMLNode(nativityStr);
		ArrayList nativitys = nativityNode.getSubNodes();
		DataFactory dataFactory = DataFactory.getInstance();
		dataFactory.putAttachment(DataFactory.ATTACH_NATIVITY, nativitys);
	}
	
/*
	private void test(AreaController[] areaControllers)
	{
		for(int i = 0 ; i < areaControllers.length ; i++)
		{
			System.out.println("area "+areaControllers[i].id);
			System.out.println("area "+areaControllers[i].name);
			System.out.println("area "+areaControllers[i].getRoomLength());
			for (int j = 0; j < areaControllers[i].getRooms().length; j++)
			{
				
				System.out.println("   rooms "+areaControllers[i].getRooms()[j].id);
				System.out.println("   rooms "+areaControllers[i].getRooms()[j].name);
				System.out.println("   rooms "+areaControllers[i].getRooms()[j]);
				
				for (int j2 = 0; j2 < areaControllers[i].getRooms()[j].getExits().length; j2++)
				{
					if(areaControllers[i].getRooms()[j].getExits()[j2] == null)
						continue;
					
					System.out.println("          targetPosittion "+areaControllers[i].getRooms()[j].getExits()[j2].targetPosittion);
					System.out.println("          targetArea "+areaControllers[i].getRooms()[j].getExits()[j2].targetArea);
					System.out.println("          targetRC "+areaControllers[i].getRooms()[j].getExits()[j2].targetRC);
				}
				System.out.println();
			}
		}
	}
	*/
}
