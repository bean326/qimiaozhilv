package cc.lv1.rpg.gs.entity.controller;

import vin.rabbit.net.AppMessage;
import vin.rabbit.net.abs.NetConnection;
import vin.rabbit.util.ByteBuffer;
import cc.lv1.rpg.gs.WorldManager;
import cc.lv1.rpg.gs.data.TaskManager;
import cc.lv1.rpg.gs.entity.BusinessInvitation;
import cc.lv1.rpg.gs.entity.ConfirmJob;
import cc.lv1.rpg.gs.entity.PVPInvitation;
import cc.lv1.rpg.gs.entity.ConfirmJob;
import cc.lv1.rpg.gs.entity.FamilyInvitation;
import cc.lv1.rpg.gs.entity.RoomExit;
import cc.lv1.rpg.gs.entity.TeamInvitation;
import cc.lv1.rpg.gs.entity.container.PlayerContainer;
import cc.lv1.rpg.gs.entity.ext.Bag;
import cc.lv1.rpg.gs.entity.ext.BuffBox;
import cc.lv1.rpg.gs.entity.ext.PVPInfo;
import cc.lv1.rpg.gs.entity.ext.FriendList;
import cc.lv1.rpg.gs.entity.ext.SkillTome;
import cc.lv1.rpg.gs.entity.ext.TaskInfo;
import cc.lv1.rpg.gs.entity.impl.Player;
import cc.lv1.rpg.gs.entity.impl.Role;
import cc.lv1.rpg.gs.net.SMsg;
import cc.lv1.rpg.gs.other.ErrorCode;
/**
 * 玩家控制器
 * @author dxw
 *
 */
public class PlayerController extends SpriteController
{
	
	private WorldManager worldManager;
	
	private NetConnection netConnection;
	
	private Player player;
	
	private boolean online;
	
	private TeamController team;
	
	private FamilyController family;
	
	private BusinessController business;
	
	private RoomExit roomExit = null;
	
	private PlayerController lastCharTarget = null;

	private int lastCharTargetId = 0;

	public PlayerController(Player player)
	{
		this.player = player;
	}

	/** 获得玩家所在区域 */
	public AreaController getArea()
	{
		PlayerContainer container = getParent();
		if(container instanceof RoomController) 
			return ((RoomController)container).getParent();
 		return worldManager.getAreaById(player.areaId);
	}
	
	/** 获得玩家所在房间 */
	public RoomController getRoom()
	{
		PlayerContainer container = getParent();
			if(container instanceof RoomController)
				return ((RoomController)container);
			
		RoomController room = null;
 		AreaController area = getArea();
		if(area != null)
		{
			room = area.getRoomById(player.roomId);	
		}
		return room;
	}
	
	public void close()
	{
		netConnection.close();
	}
	
	public void sendAlert(int alert)
	{
		ByteBuffer buffer = new ByteBuffer();
		buffer.writeInt(alert);
		netConnection.sendMessage(new SMsg(SMsg.S_ALERT_MESSAGE,buffer));
	}
	
	public void sendError(String error)
	{
		ByteBuffer buffer = new ByteBuffer();
		buffer.writeUTF(error);
		netConnection.sendMessage(new SMsg(SMsg.S_ERROR_MESSAGE,buffer));
	}

	public void sendException(int exception)
	{
		ByteBuffer buffer = new ByteBuffer();
		buffer.writeInt(exception);
		netConnection.sendMessage(new SMsg(SMsg.S_EXCEPTION_MESSAGE,buffer));
	}
	


	
	
	/**
	 * PK请求
	 * @param msg
	 */
	private void requestPK(AppMessage msg)
	{
		int playerId = msg.getBuffer().readInt();
		if(!(getParent() instanceof RoomController))
		{
			sendAlert(ErrorCode.ALERT_PLAYER_NOTAT_ROOM);
			return;
		}
		RoomController room = (RoomController) getParent();
		if(room.isPkAble())
		{
			sendAlert(ErrorCode.ALERT_ROOM_ISNOT_BATTLE);
			return;
		}
		PlayerController target = room.getPlayer(playerId);//被邀请者
		if(player == null)
		{
			sendAlert(ErrorCode.EXCEPTION_LOGIN_PLAYERNOTATGAME);
			return;
		}
		if(target.getRoom().id != getRoom().id)
		{
			sendAlert(ErrorCode.ALERT_PLAYER_NOTAT_ROOM);
			return;
		}
		if(target.getPlayer().hitPoint <= 1 || player.hitPoint <= 1)
		{
			sendAlert(ErrorCode.ALERT_PLAYER_NOT_LIFE);
			return;
		}
//		if(getPlayer().level < 16 || target.getPlayer().level < 16)
//		{
//			sendAlert(ErrorCode.ALERT_BEFORE_SIXTEEN_NOT_PK);
//			return;
//		}
		if(target.getTeam() != null)
		{
			if(!target.getTeam().isLeader(target))
			{
				sendAlert(ErrorCode.ALERT_REQUEST_NOT_LEADER_ERROR);
				return;
			}
		}
		if((target.getPlayer().atrocity < 90 && player.atrocity >= 90) || (target.getPlayer().atrocity >= 90 && player.atrocity < 90))//红名邀请白名，黄名
		{
			getRoom().playerHitPlayer(this, target);
		}
		else
		{
			if(player.camp != target.getPlayer().camp)
			{
				sendAlert(ErrorCode.ALERT_NOT_INVITE_DIFF_CAMP);
				return;
			}
			ConfirmJob cj = new PVPInvitation(this,target);
			cj.setName(getName()+"-PVPInvitation-"+target.getName());
			
			if(worldManager.getConfirmation(cj.getName()) == null)
			{
				worldManager.addConfirmJob(cj);
			}
			ByteBuffer buffer = new ByteBuffer(8);
			buffer.writeInt(getID());
			buffer.writeUTF(getName());
			target.getNetConnection().sendMessage(new SMsg(SMsg.S_PLAYER_REQUEST_PK_COMMAND,buffer));
		}
		
	}
	
	/**
	 * 玩家回复PK邀请
	 * @param msg
	 */
	private void responsePK(AppMessage msg)
	{
		int inviterId = msg.getBuffer().readInt();//邀请者的ID
		boolean accept = msg.getBuffer().readBoolean();//是否同意PK
		if(!(getParent() instanceof RoomController))
		{
			sendAlert(ErrorCode.ALERT_PLAYER_IS_BATTLING);
			return;
		}
		RoomController room = (RoomController) getParent();
		PlayerController inviter = room.getPlayer(inviterId);
		if(inviter == null)
		{
			sendAlert(ErrorCode.EXCEPTION_LOGIN_PLAYERNOTATGAME);
			return;
		}
		if(inviter.getRoom().id != getRoom().id)
		{
			sendAlert(ErrorCode.ALERT_PLAYER_NOTAT_ROOM);
			return;
		}
		String inviteName = inviter.getName() + "-PVPInvitation-" + getName();
		Object obj = worldManager.getConfirmation(inviteName);
		if(obj == null)
		{
			sendAlert(ErrorCode.ALERT_PVP_INVITE_CANCEL);
			return;
		}
		if(!(obj instanceof PVPInvitation))
		{
			System.out.println("这个邀请不是PVP邀请！");
			return;
		}
		PVPInvitation pk = (PVPInvitation) obj;
		if(!accept)
		{	
			ByteBuffer buffer = new ByteBuffer(5);
			buffer.writeUTF(getName());
			buffer.writeBoolean(false);//不同意PK
			inviter.netConnection.sendMessage(new SMsg(SMsg.S_PLAYER_RESPONSE_PK_COMMAND,buffer));
		}
		else
		{
			pk.confirm(accept);
			pk.setDefaultLifeTime();
		}
	}
	
	/**
	 * 玩家向另一个玩家发出组队请求
	 * @param target
	 * @param msg
	 */
	private void requestTeam(AppMessage msg)
	{
		if(getTeam() != null && !getTeam().isLeader(this))
		{
			sendAlert(ErrorCode.ALERT_PLAYER_INVITE_ERROR);
			return;
		}
		int playerId = msg.getBuffer().readInt();//要邀请谁加入 队伍

		if(!(getParent() instanceof RoomController))
		{
			sendAlert(ErrorCode.ALERT_PLAYER_NOTAT_ROOM);
			return;
		}
		RoomController room = (RoomController) getParent();
		PlayerController player = room.getPlayer(playerId);
		if(player == null)
		{
			sendAlert(ErrorCode.EXCEPTION_LOGIN_PLAYERNOTATGAME);
			return;
		}
		if(player.getRoom().id != getRoom().id)
		{
			sendAlert(ErrorCode.ALERT_PLAYER_NOTAT_ROOM);
			return;
		}
		if(player.getTeam() != null)
		{
			sendAlert(ErrorCode.ALERT_PLAYER_IN_TEAM);
			return;
		}
		ConfirmJob cj = new TeamInvitation(this,player);
		cj.setName(getName()+"-teamInvitation-"+player.getName());
		
		if(worldManager.getConfirmation(cj.getName()) == null)
		{
			worldManager.addConfirmJob(cj);
		}
		ByteBuffer buffer = new ByteBuffer(8);
		buffer.writeInt(getID());
		buffer.writeUTF(getName());
		player.getNetConnection().sendMessage(new SMsg(SMsg.S_PLAYER_REQUEST_TEAM_COMMAND,buffer));
	}
	
	/**
	 * 回复组队请求
	 * @param msg
	 * @param room
	 */
	private void responseTeam(AppMessage msg)
	{
		int inviterId = msg.getBuffer().readInt();//要加入谁的队伍
		boolean accept = msg.getBuffer().readBoolean();//是否同意加入队伍
		if(!(getParent() instanceof RoomController))
		{
			sendAlert(ErrorCode.ALERT_PLAYER_NOTAT_ROOM);
			return;
		}
		RoomController room = (RoomController) getParent();
		PlayerController inviter = room.getPlayer(inviterId);
		if(inviter == null)
		{
			sendAlert(ErrorCode.EXCEPTION_LOGIN_PLAYERNOTATGAME);
			return;
		}
		if(inviter.getRoom().id != getRoom().id)
		{
			sendAlert(ErrorCode.ALERT_PLAYER_NOTAT_ROOM);
			return;
		}
		if(inviter.getTeam() != null && inviter.getTeam().getPlayer(player.id) != null)
		{
			sendAlert(ErrorCode.ALERT_PLAYER_IN_TEAM);
			return;
		}
		String inviteName = inviter.getName() + "-teamInvitation-" + getName();
		Object obj = worldManager.getConfirmation(inviteName);
		if(obj == null)
		{
			sendAlert(ErrorCode.ALERT_TEAM_INVITE_CANCEL);
			return;
		}
		if(!(obj instanceof TeamInvitation))
		{
			sendAlert(ErrorCode.EXCEPTION_CLASS_ERROR);
			return;
		}
		TeamInvitation ti = (TeamInvitation) worldManager.getConfirmation(inviteName);
		ByteBuffer buffer = new ByteBuffer();
		buffer.writeUTF(getName());//被邀方
		if(!accept)
		{	
			buffer.writeBoolean(false);//不同意加入队伍
			inviter.netConnection.sendMessage(new SMsg(SMsg.S_ADD_TEAM_COMMAND,buffer));
		}
		else
		{
			TeamController team = ti.confirm(accept);
			if(team == null)
				return;
			ti.setDefaultLifeTime();
			buffer.writeBoolean(true);//同意加入队伍
			team.writeTo(buffer);
			team.dispatchMsg(SMsg.S_ADD_TEAM_COMMAND,buffer);//转发给队伍中所有队员
		}
	}
	
	private void familyChange(ByteBuffer buffer)
	{
		String name = buffer.readUTF();
		
		if(family == null)
			return;
		
		if(family.leaderId != getID())
			return;
		
		
		if(!family.isInFamily(name))
		{
			sendError("转让的人员不是本家族人员");
			return;
		}
		
		PlayerController target = worldManager.getPlayerController(name);
		
		if(target == null)
		{
			sendError("转让的目标玩家不在线");
			return;
		}
		
		family.setLeader(target);
		target.getPlayer().isFamilyLeader = true;
		player.isFamilyLeader = false;
		
		buffer =new ByteBuffer(1);
		buffer.writeBoolean(false);
		netConnection.sendMessage(new SMsg
				(SMsg.S_PLAYER_FAMILYLEADERCHANGE_COMMAND,buffer));
		buffer =new ByteBuffer(1);
		buffer.writeBoolean(true);
		target.getNetConnection().sendMessage(new SMsg
				(SMsg.S_PLAYER_FAMILYLEADERCHANGE_COMMAND,buffer));
	}

	private void familyOut()
	{
		if(family == null)
			return;
		
		if(family.leaderId == getID())
		{
			familyRmove();
			return;
		}
		
		player.familyId = 0;
		player.familyName = "";
		family.removePlayer(this);
		family.removeFamily(getName());
		
		ByteBuffer buffer = new ByteBuffer(10);
		buffer.writeUTF(getName());
		netConnection.sendMessage
		(new SMsg(SMsg.S_PLAYER_FAMILYOUT_COMMAND,
				new ByteBuffer(buffer.getBytes())));
		
		PlayerController leader = family.getLeader();
		if(leader != null)
		{
			leader.getNetConnection().sendMessage
			(new SMsg(SMsg.S_PLAYER_FAMILYOUT_COMMAND,buffer));
		}
		
		setFamilyController(null);
	}

	private void familyRmove()
	{
		if(family == null)
			return;
		
		if(family.leaderId != getID())
			return;
		
		
		int count = family.getPlayerCount();
		for (int i = 0; i < count; i++)
		{
			PlayerController everyone = family.getPlayerByIndex(i);
			
			if(everyone == null)
				continue;
			
			if(everyone.getID() != getID())
				everyone.setFamilyController(null);
			
			everyone.getPlayer().familyId = 0;
			everyone.getPlayer().familyName = "";
			everyone.getNetConnection().sendMessage
			(new SMsg(SMsg.S_PLAYER_FAMILYREMOVE_COMMAND,new ByteBuffer(1)));
		}
		
		worldManager.removeFamily(family);
		setFamilyController(null);
	}

	private void familyKick(ByteBuffer buffer)
	{
		String name = buffer.readUTF();
		
		if(family == null)
			return;
		
		if(family.leaderId != getID())
			return;
		
		int index = family.getPlayerIndexByFamily(name);
		
		if(index != -1)
		{
			family.removeFamily(index);
		
			PlayerController target= worldManager.getPlayerController(name);

			if(target != null)
			{
				target.getPlayer().familyId = 0;
				target.getPlayer().familyName = "";
				target.setFamilyController(null);
				
				buffer = new ByteBuffer(10);
				buffer.writeUTF(name);
				target.getNetConnection().sendMessage
				(new SMsg(SMsg.S_PLAYER_FAMILYKICK_COMMAND,buffer));
			}
			buffer = new ByteBuffer(10);
			buffer.writeUTF(name);
			netConnection.sendMessage(new SMsg(SMsg.S_PLAYER_FAMILYKICK_COMMAND,buffer));
		}
		else
		{
			sendError("您踢的玩家不在家族当中");
		}

	}

	private void familyList()
	{
		if(family == null)
			return;
		
		ByteBuffer buffer = new ByteBuffer(32);
		family.writeTo(buffer);
		netConnection.sendMessage(new SMsg(SMsg.S_PLAYER_FAMILYLIST_COMMAND,buffer));
	}

	private void familyResponse(ByteBuffer buffer)
	{
		String confirmationName = buffer.readUTF();
		boolean result = buffer.readBoolean();
		
		FamilyInvitation fi = (FamilyInvitation)worldManager.getConfirmation(confirmationName);
	    
		if(fi == null)
	    {
	    	sendError("邀请已超时");
	    	return;
	    }
	    
	    fi.confirm(result);		
	    fi.setLifeTime(-0xffff);
	}

	private void familyRequest(ByteBuffer buffer)
	{
		PlayerContainer container =  getParent();
		
		if(!(container instanceof RoomController))
			return;

		if(family == null)
		{
			sendError("你没有家族");
			return;
		}
		
		if(family.leaderId != getID())
		{
			sendError("不是族长不能邀请");
			return;
		}
		
		if(family.isFullPlayer())
		{
			sendError("当前家族已经满了");
			return;
		}
		
		RoomController room = (RoomController)container;
		
		int id = buffer.readInt();
		
		PlayerController targetPlayer = room.getPlayer(id);
		
		if(targetPlayer == null)
		{
			sendError("被邀请的玩家没在同一房间");
			return;
		}
		
		if(targetPlayer.getPlayer().familyId != 0)
		{
			sendError("被邀请的玩家已有家族了");
			return;
		}
		
		if(family.isInFamily(targetPlayer.getName()))
		{
			sendError("玩家已经在本家族中");
			return;
		}
		
		

		String confirmationName = getName() + "-familyInvite-"
				+ targetPlayer.getName();

		ConfirmJob cj = worldManager.getConfirmation(confirmationName);
		if(cj != null)
		{
			sendError("重复的邀请");
			return;
		}
		
		sendError("邀请已发出");
		
		buffer = new ByteBuffer(24);
		buffer.writeUTF(confirmationName);
		buffer.writeUTF(getName());
		targetPlayer.getNetConnection().sendMessage(new SMsg(SMsg.S_PLAYER_FAMILYREQUEST_COMMAND,buffer));
		
		cj = new FamilyInvitation(this,targetPlayer);
		cj.setName(confirmationName);
		
		worldManager.addConfirmJob(cj);
	}

	private void friendProcess(ByteBuffer buffer)
	{
		int type = buffer.readByte();
		//type 1addFriend 2removeFriend 3addFriend 4removeFriend 
		
		String name= buffer.readUTF();
		FriendList friendList = (FriendList)player.getExtPlayerInfo("friendList");
		
		if(type == FriendList.ADD_FRIEND)
		{
			if(worldManager.getPlayerController(name) == null)
			{
				sendError("玩家不在线");
				return;
			}
			if(friendList.isInFriends(name))
			{
				sendError("玩家已在好友中");
				return;
			}
			if(friendList.isInBlack(name))
			{
				sendError("玩家已在黑名单中");
				return;
			}
			
			if(friendList.addFriend(name))
			{
				updateFriendList(type,name);
			}
			else
			{
				sendError("好友已达上限");
			}
		}
		else if(type == FriendList.REMOVE_FRIEND)
		{
			if(!friendList.isInFriends(name))
			{
				sendError("玩家不在好友列表中");
				return;
			}
			friendList.removeFromFriends(name);
			updateFriendList(type,name);
		}
		else if(type == FriendList.ADD_BLACK)
		{
			if(worldManager.getPlayerController(name) == null)
			{
				sendError("玩家不在线");
				return;
			}
			if(friendList.isInBlack(name))
			{
				sendError("玩家已在黑名单中");
				return;
			}
			
			if(friendList.addBlack(name))
			{
				if(friendList.isInFriends(name))
				{
					friendList.removeFromFriends(name);
				}
				updateFriendList(type,name);
			}
			else
			{
				sendError("黑名单已达上限");
			}
		}
		else if(type == FriendList.REMOVE_BLACK)
		{
			if(!friendList.isInBlack(name))
			{
				sendError("玩家不在黑名单列表中");
				return;
			}
			friendList.removeFromBlack(name);
			updateFriendList(type,name);
		}
		else if(type == FriendList.LIST)
		{
			updateFriendList(type,name);
		}
	}
	/**
	 * 更新好友列表
	 * @param type
	 */
	private void updateFriendList(int type,String name)
	{
		FriendList friendList = (FriendList)player.getExtPlayerInfo("friendList");
		ByteBuffer buffer = new ByteBuffer(24);
		buffer.writeByte(type);
		
		if(type == FriendList.LIST)
			friendList.writeTo(buffer, worldManager);
		else
			buffer.writeUTF(name);
		
		netConnection.sendMessage(new SMsg(SMsg.S_PLAYER_FRIENDLIST_COMMAND,buffer));
	}
	
	
	private void processChat(ByteBuffer buffer)
	{
		// 聊天类型 0私聊  1当前房间所有玩家   2当前区域所有玩家  3当前世界所有玩家 4当前队列所有玩家
		int chatType = buffer.readByte();
		String chatMsg = buffer.readUTF();
		
		if(chatType == 0)
		{
			int id = buffer.readInt();
			
			PlayerController targetPlayer = null;
			
			if(id == lastCharTargetId)
			{
				targetPlayer = lastCharTarget;
			}
			else
			{
				targetPlayer = getTeam()==null?
						null:getTeam().getPlayer(id);
				if(targetPlayer == null)
					targetPlayer = getRoom().getPlayer(id);
					if(targetPlayer == null)
						targetPlayer = getArea().getPlayer(id);
						if(targetPlayer == null)
							targetPlayer = getWorldManager().getPlayer(id);
							if(targetPlayer == null)
								return;
				lastCharTarget = targetPlayer;
				lastCharTargetId = targetPlayer.getID();
			}
			
			if(targetPlayer == null)
				return;
				
			buffer = new ByteBuffer();
			buffer.writeInt(getID());
			buffer.writeUTF(getName());
			buffer.writeUTF(chatMsg);
			targetPlayer.getNetConnection()
			.sendMessage(new SMsg(SMsg.S_CHAT_COMMAND, new ByteBuffer(buffer.getBytes())));
			getNetConnection()
			.sendMessage(new SMsg(SMsg.S_CHAT_COMMAND, buffer));
			
			return;
		}

		PlayerContainer container = null;
		
		if(chatType == 1)
		{
			container = getRoom();
		}
		else if(chatType ==2)
		{
			container = getArea();
		}
		else if(chatType ==3)
		{
			container = worldManager;
		}
		else if(chatType ==4)
		{
			container = getTeam();
		}
		
		if(container == null)
			return;
		
		buffer = new ByteBuffer(24);
		buffer.writeInt(getID());
		buffer.writeUTF(getName());
		buffer.writeUTF(chatMsg);
		container.dispatchMsg(SMsg.S_CHAT_COMMAND, buffer);
		
	}

	/**
	 * 发送自己的完整信息
	 */
	public void sendInfo()
	{	
		ByteBuffer buffer = new ByteBuffer(64);
		player.writeTo(buffer);
		netConnection.sendMessage(new SMsg(SMsg.S_PLAYER_INFO_COMMAND,buffer));
	}
	
	public void sendSkill(final int type)
	{
		SkillTome skill = (SkillTome)player.getExtPlayerInfo("skillTome");
		
		ByteBuffer buffer = new ByteBuffer();
		
		if(type == 1)
		{
			buffer.writeByte(type);
			skill.writeTo(buffer);
		}
		else if(type == 2)
		{
			buffer.writeByte(type);
			skill.writeActiveSkill(buffer);
		}
		netConnection.sendMessage(new SMsg(SMsg.S_GET_SKILL_COMMAND,buffer));
	}
	
	/**
	 * 键盘移动
	 * @param msg
	 */
	public void keyMoveTo(AppMessage msg)
	{
		RoomController room  = getRoom();
		
		if(room == null)
			return;
		
		ByteBuffer readBuff = msg.getBuffer();
		int state = readBuff.readByte(); //0停 1走
		int pos = readBuff.readByte(); //1上   2下   4左  8右   5上左 6下左 9上右 10下右
		int x = readBuff.readInt(); //发送按下坐标 x
		int y = readBuff.readInt(); //发送按下坐标 x
		
		
		ByteBuffer writeBuff = new ByteBuffer(14);
		writeBuff.writeInt(player.id);
		writeBuff.writeByte(state);
		writeBuff.writeByte(pos);
		writeBuff.writeInt(x);
		writeBuff.writeInt(y);
		
		if(state == 0) //停下的时候记录玩家的坐标
		{
			getPlayer().x = x;
			getPlayer().y = y;
		}
		room.dispatchMsg(SMsg.S_PLAYER_ONKEYMOVE_COMMAND, writeBuff);
	}
	
	/**
	 * 鼠标移动
	 * @param msg
	 */
	private void mouseMoveTo(AppMessage msg)
	{
		RoomController room  = getRoom();
		
		if(room == null)
			return;
		
		ByteBuffer readBuff = msg.getBuffer();
		int x = readBuff.readInt();  //发送目标坐标 x
		int y = readBuff.readInt();  //发送目标坐标 y
		
		ByteBuffer writeBuff = new ByteBuffer(12);
		writeBuff.writeInt(player.id);
		writeBuff.writeInt(x);
		writeBuff.writeInt(y);
		room.dispatchMsg(SMsg.S_PLAYER_ONMOUSEMOVE_COMMAND, writeBuff);
	}

	/**
	 * 交易邀请
	 * @param msg
	 */
	private void requestBusiness(AppMessage msg)
	{

		PlayerContainer container =  getParent();
		
		if(!(container instanceof RoomController))
			return;

		if(business != null)
		{
			sendError("你已经在交易中！");
			return;
		}
		
		RoomController room = (RoomController)container;
		
		int playerId = msg.getBuffer().readInt();
		
		PlayerController targetPlayer = room.getPlayer(playerId);
		
		if(targetPlayer == null)
		{
			sendError("被邀请的玩家没在同一房间");
			return;
		}
		
		if(targetPlayer.business != null)
		{
			sendError("被邀请的玩家已经在交易中！");
			return;
		}

		String confirmationName = getName() + "-businessInvitation-"
				+ targetPlayer.getName();

		ConfirmJob cj = worldManager.getConfirmation(confirmationName);
		if(cj != null)
		{
			sendError("重复的邀请");
			return;
		}
		
		sendError("邀请已发出");
		
		ByteBuffer buffer = new ByteBuffer(24);
		buffer.writeUTF(confirmationName);
		buffer.writeUTF(getName());
		targetPlayer.getNetConnection().sendMessage(new SMsg(SMsg.S_PLAYER_BUSINESS_REQUEST_COMMAND,buffer));
		
		cj = new BusinessInvitation(this,targetPlayer);
		cj.setName(confirmationName);
		
		worldManager.addConfirmJob(cj);
	}
	
	/**
	 * 交易回复
	 * @param msg
	 */
	private void responseBusiness(AppMessage msg)
	{
		String confirmationName = msg.getBuffer().readUTF();
		boolean result = msg.getBuffer().readBoolean();
		
		BusinessInvitation bi = (BusinessInvitation)worldManager.getConfirmation(confirmationName);
	    
		if(bi == null)
	    {
	    	sendError("邀请已超时");
	    	return;
	    }
	    
		bi.confirm(result);		
		bi.setDefaultLifeTime();
	}
	
	public String getName()
	{
		return player.name;
	}

	public int getID()
	{
		return player.id;
	}

	public long getObjectIndex()
	{
		return 0;
	}
	
	public Player getPlayer()
	{
		return player;
	}

	public void setPlayer(Player player)
	{
		this.player = player;
	}

	public WorldManager getWorldManager()
	{
		return worldManager;
	}

	public void setWorldManager(WorldManager worldManager)
	{
		this.worldManager = worldManager;
	}

	public boolean isOnline()
	{
		return online;
	}

	public void setOnline(boolean online)
	{
		this.online = online;
	}

	public NetConnection getNetConnection()
	{
		return netConnection;
	}

	public void setNetConnection(NetConnection netConnection)
	{
		this.netConnection = netConnection;
	}


	public TeamController getTeam()
	{
		return team;
	}

	public void setTeam(TeamController team)
	{
		this.team = team;
	}

	public RoomExit getRoomExit()
	{
		return roomExit;
	}

	public void setRoomExit(RoomExit roomExit)
	{
		this.roomExit = roomExit;
	}
	
	public void update(long currentMillis)
	{
/*		if(player.isHaveBuff)
		{
			BufferBox buffBox = (BufferBox)player.getExtPlayerInfo("buffBox");
			buffBox.update(currentMillis);
		}*/
	}

	public boolean isDead()
	{
		return player.hitPoint <= 1;
	}
	
	/**
	 * 设置玩家凶恶值
	 */
	public void setAtrocity()
	{
		int at = 0;
		if(at >= 0 && at < 40)
			at += 100;
		else if(at >= 40 && at <  90)
			at += 150;
		else if(at >= 90 && at <  200)
			at += 200;
		else if(at >= 200 && at <  400)
			at += 300;
		else if(at >= 400 && at <  600)
			at += 450;
		else if(at >= 600 && at <  1200)
			at += 650;
		else if(at > 1200)
			at = 1200;
		
		player.atrocity += at;
	}
	
	
	/**
     * 与客户端通信
     * @param msg
     */
	public void clientMessageChain(AppMessage msg)
	{
		int type = msg.getType();
		
		if(type == SMsg.C_PLAYER_INFO_COMMAND)
		{
			sendInfo();
		}
		else if(type == SMsg.C_PLAYER_ONKEYMOVE_COMMAND)
		{
			keyMoveTo(msg);
		}
		else if(type == SMsg.C_PLAYER_ONMOUSEMOVE_COMMAND)
		{
			mouseMoveTo(msg);
		}
		else if(type == SMsg.C_GET_PLAYER_EQUIPSET_COMMAND)
		{
			int playerId = msg.getBuffer().readInt();
			PlayerController target = null;
			if(playerId == getPlayer().id)
				target = this;
			else
				target = worldManager.getPlayerControllerById(playerId);
			
			//**************************************************************************
			PVPInfo pvp = (PVPInfo) target.getPlayer().getExtPlayerInfo("PVPInfo");
			System.out.println(target.getName()+"的PK信息如下：");
			pvp.print();
			//**************************************************************************
			
			Bag bag = (Bag) target.getPlayer().getExtPlayerInfo("bag");
			ByteBuffer buffer = new ByteBuffer();
			bag.getPlayerEquipSet(target,buffer);
			netConnection.sendMessage(new SMsg(SMsg.S_GET_PLAYER_EQUIPSET_COMMAND,buffer));
		}	
		else if(type == SMsg.C_GET_TASKS_COMMAND)
		{
			ByteBuffer buffer = new ByteBuffer(32);

			if(msg.getBuffer().readByte() == 0)//0 自己的  1可接
			{
				TaskInfo taskInfo = (TaskInfo)player.getExtPlayerInfo("taskInfo");
				buffer.writeByte(0);
				taskInfo.writeTo(buffer);
				netConnection.sendMessage(new SMsg(SMsg.S_GET_TASKS_COMMAND,buffer));
			}
			else
			{
				TaskManager.getInstance().writeCandoTasks(this);
			}
		}
		else if(type == SMsg.C_CANCEL_TASKS_COMMAND)
		{
			int id = msg.getBuffer().readInt();
			
			TaskInfo taskinfo = (TaskInfo)player.getExtPlayerInfo("taskInfo");
			
			if(!taskinfo.cancelTask(id))
			{
				sendAlert(ErrorCode.ALERT_TASK_NOT_CANCEL);
				return;
			}
			ByteBuffer buffer = new ByteBuffer(4);
			buffer.writeInt(id);
			netConnection.sendMessage(new SMsg(SMsg.S_CANCEL_TASKS_COMMAND,buffer));
		}
		else if(type == SMsg.C_PLAYER_REQUEST_TEAM_COMMAND)
		{
			requestTeam(msg);
		}
		else if(type == SMsg.C_ADD_TEAM_COMMAND)
		{
			responseTeam(msg);
		}
		else if(type == SMsg.C_CHAT_COMMAND)
		{
			processChat(msg.getBuffer());
		}
		else if(type == SMsg.C_GET_SKILL_COMMAND)
		{
			type = msg.getBuffer().readByte();
			sendSkill(type);
		}
		else if(type == SMsg.C_PLAYER_REQUEST_PK_COMMAND)
		{
			requestPK(msg);
		}
		else if(type == SMsg.S_PLAYER_RESPONSE_PK_COMMAND)
		{
			responsePK(msg);
		}
		else if(type == SMsg.S_PLAYER_FRIENDLIST_COMMAND)
		{
			friendProcess(msg.getBuffer());
		}
		else if(type == SMsg.C_PLAYER_FAMILYREQUEST_COMMAND)
		{
			familyRequest(msg.getBuffer());
		}
		else if(type == SMsg.C_PLAYER_FAMILYRESPONSE_COMMAND)
		{
			familyResponse(msg.getBuffer());
		}
		else if(type == SMsg.C_PLAYER_FAMILYLIST_COMMAND)
		{
			familyList();
		}
		else if(type == SMsg.C_PLAYER_FAMILYKICK_COMMAND)
		{
			familyKick(msg.getBuffer());
		}
		else if(type == SMsg.C_PLAYER_FAMILYREMOVE_COMMAND)
		{
			familyRmove();
		}
		else if(type == SMsg.C_PLAYER_FAMILYOUT_COMMAND)
		{
			familyOut();
		}
		else if(type == SMsg.C_PLAYER_FAMILYLEADERCHANGE_COMMAND)
		{
			familyChange(msg.getBuffer());
		}
		else if(type == SMsg.C_PLAYER_BUSINESS_REQUEST_COMMAND)
		{
			requestBusiness(msg);
		}
		else if(type == SMsg.C_PLAYER_BUSINESS_RESPONSE_COMMAND)
		{
			responseBusiness(msg);
		}
	}


	public FamilyController getFamily()
	{
		return family;
	}
	
	public void setFamilyController(FamilyController family)
	{
		this.family = family;
	}
}
