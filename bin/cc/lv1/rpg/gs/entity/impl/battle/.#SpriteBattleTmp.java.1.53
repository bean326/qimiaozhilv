package cc.lv1.rpg.gs.entity.impl.battle;



import vin.rabbit.util.ByteBuffer;
import vin.rabbit.util.collection.i.List;
import vin.rabbit.util.collection.impl.ArrayList;
import vin.rabbit.util.collection.impl.HashMap;
import cc.lv1.rpg.gs.entity.controller.BattleController;
import cc.lv1.rpg.gs.entity.controller.MonsterController;
import cc.lv1.rpg.gs.entity.controller.PVEController;
import cc.lv1.rpg.gs.entity.controller.PVPController;
import cc.lv1.rpg.gs.entity.controller.PlayerController;
import cc.lv1.rpg.gs.entity.controller.SpriteController;
import cc.lv1.rpg.gs.entity.ext.BuffBox;
import cc.lv1.rpg.gs.entity.ext.EquipSet;
import cc.lv1.rpg.gs.entity.ext.PlayerBaseInfo;
import cc.lv1.rpg.gs.entity.ext.SkillTome;
import cc.lv1.rpg.gs.entity.i.Sprite;
import cc.lv1.rpg.gs.entity.impl.Goods;
import cc.lv1.rpg.gs.entity.impl.Monster;
import cc.lv1.rpg.gs.entity.impl.MonsterDropProp;
import cc.lv1.rpg.gs.entity.impl.Player;
import cc.lv1.rpg.gs.entity.impl.battle.effect.Effect;
import cc.lv1.rpg.gs.entity.impl.battle.effect.FlashEffect;
import cc.lv1.rpg.gs.entity.impl.battle.effect.TimeEffect;
import cc.lv1.rpg.gs.entity.impl.battle.skill.ActiveSkill;
import cc.lv1.rpg.gs.entity.impl.battle.skill.Skill;
import cc.lv1.rpg.gs.entity.impl.goods.GoodsEquip;
import cc.lv1.rpg.gs.net.SMsg;

/**
 * 精灵临时数据
 * @author dxw
 *
 */
public abstract class SpriteBattleTmp
{
	
	/***
	 * 用来存带出战斗的buff
	 */
	protected BuffBox buffBox;
	
	protected int teamNo; 
	
	protected int index;
	
	protected PlayerBaseInfo baseInfo;
	
	private ByteBuffer effectBuffer = new ByteBuffer(10);
	
	protected SpriteController currentController;
	
	protected Sprite currentSprite;
	
	protected PlayerController targetPlayer = null;
	
	protected MonsterController targetMonster = null;
	
	protected BattleController battle = null;
	
	protected int effectCount = 0;
	
	protected boolean isLocked = false;
	
	protected int pCdTimer = 0;
	
	public long lastPingTime = 0;
	
	protected boolean isAction = false;
	
	public void setCDTimer(int pCdTimer)
	{
		this.pCdTimer = pCdTimer;
	}
	
	public int getCDTimer()
	{
		return this.pCdTimer;
	}
	
	public boolean isLocked()
	{
		return isLocked;
	}

	public void setLocked(boolean isLocked)
	{
		this.isLocked = isLocked;
	}

	public BattleController getBattle()
	{
		return battle;
	}

	public void setBattle(BattleController battle)
	{
		this.battle = battle;
	}

	/**
	 * 战斗临时的buff
	 */
	protected ArrayList effectList = new ArrayList();
	
	private HashMap inBattleEffect = new HashMap(20);
	
	private boolean isDead = false;

	public void setIndex(int i)
	{
		index = i;
	}
	
	public int getIndex()
	{
		return index;
	}
	
	public boolean isDead()
	{
		return isDead;
	}

	public void setDead(boolean isDead)
	{
		this.isDead = isDead;
		
		if(!isDead)
			return;
		
		ByteBuffer buffer = new ByteBuffer(2);
		buffer.writeByte(teamNo);
		buffer.writeByte(index);
		battle.dispatchMsg(SMsg.S_BATTLE_DIE, buffer);
		
		if(currentController instanceof PlayerController)
		{
			if(buffBox != null && buffBox.getEffectList() != null)
			{
				for (int i = 0; i < buffBox.getEffectList().size(); i++) 
				{
					TimeEffect effect = (TimeEffect) buffBox.getEffectList().get(i);
					effect.setDuration(0);
				}
			}
			if(effectList != null)
				battle.removeEffect(effectList, this);
		}
		
//		loserMercy(this);//死掉的掉宝
	}
	
	public void setTeamNo(int teamNo)
	{
		this.teamNo = teamNo;
	}
	
	public int getTeamNo()
	{
		return teamNo;
	}
	
	/**
	 * 特殊技能....
	 * @param effect
	 * @param isAdd
	 */
	private void changeUnusualEffectState(TimeEffect effect,boolean isAdd)
	{
		int length = effect.dataType.length;
		for (int i = 0; i < length; i++)
		{
			if(effect.dataType[i].equals("0"))
				break;
			
			if(effect.dataType[i].equals("chaos")) //混乱
			{
				isChaos = isAdd;
				isBeforeUnusualEffect = isAdd;
				break;
			}
			else if(effect.dataType[i].equals("damageModify")) //伤害修改
			{
				if(isAdd)
					damageTimeEffect = effect;
				else
					damageTimeEffect = null;
				break;
			}
			else if(effect.dataType[i].equals("timeEffectInvain"))
			{
				isTimeEffectInvain = isAdd;
			}
		}

	}
	
	protected boolean isBeforeUnusualEffect = false;
	
	protected boolean isTimeEffectInvain = false;
	
	protected boolean isChaos = false;
	
	protected TimeEffect damageTimeEffect = null;

	protected boolean checkUnusualEffect()
	{
		PVEController pve = null;
		PVPController pvp = null;
		
		if(battle instanceof PVEController)
		{
			pve = (PVEController)battle;
		}
		else if(battle instanceof PVPController)
		{
			pvp = (PVPController)battle;
		}

		if(isChaos && isBeforeUnusualEffect) //混乱
		{
			if(pve != null)
			{
				MonsterController [] monsters = pve.getMonsters();
				
				for (int i = 0; i < monsters.length; i++)
				{
					if(monsters[i].getAttachment().isDead)
						continue;
					
					if(((int)(Math.random()*4)) == 3)
					{
						setSkillTarget(monsters[i]);
						return true;
					}	
				}
				
				PlayerController []players = pve.getPlayers();
				
				for (int i = 0; i < players.length; i++)
				{
					if(players[i].getAttachment().isDead)
						continue;
					
					if(((int)(Math.random()*4)) == 3)
					{
						setSkillTarget(players[i]);
						return true;
					}	
				}
			}
			else if(pvp != null)
			{
				PlayerController [] targetPlayers = pvp.getTargetPlayers();
				
				for (int i = 0; i < targetPlayers.length; i++)
				{
					if(targetPlayers[i].getAttachment().isDead)
						continue;
					
					if(((int)(Math.random()*4)) == 3)
					{
						setSkillTarget(targetPlayers[i]);
						return true;
					}	
				}
				
				PlayerController [] players = pvp.getPlayers();
				
				for (int i = 0; i < players.length; i++)
				{
					if(players[i].getAttachment().isDead)
						continue;
					
					if(((int)(Math.random()*4)) == 3)
					{
						setSkillTarget(players[i]);
						return true;
					}	
				}
			}
		}
		return false;
	}
	
	private int getEffectListIndex(int effectId)
	{
		for (int i = 0; i < effectList.size(); i++) 
		{
			if(effectList.get(i) == null)
				continue;
			TimeEffect te = (TimeEffect) effectList.get(i);
			if(te.id == effectId)
				return i;
		}
		return -1;
	}
	
	private TimeEffect getEffectByType(int type)
	{
		for (int i = 0; i < effectList.size(); i++) 
		{
			if(effectList.get(i) == null)
				continue;
			TimeEffect te = (TimeEffect) effectList.get(i);
			if(te.type == type)
				return te;
		}
		return null;
	}
	
	
	public boolean addEffect(TimeEffect effect)
	{
		List list = getEffects(effect.type);
		if(list.size() == 0)
		{
			effectList.add(effect);
			inBattleEffect.put(effect.id,effect);
			effect.setBeginTime(System.currentTimeMillis());
			changeUnusualEffectState(effect,true);
//			System.out.println("SpriteBattleTmp 323增加战斗内 buff..... "+ effect.name+"  玩家："+currentSprite.name);
			return true;
		}
		else
		{
			boolean result = true;
			for (int i = 0; i < list.size(); i++) 
			{
				TimeEffect te = (TimeEffect) list.get(i);
				if(te.level < effect.level)
				{
					deleteEffect(te);
					removeEffect(te);
				}
				else if(te.level == effect.level)
				{
					te.setBeginTime(System.currentTimeMillis());
					result = false;
				}
				else
				{
					result = false;
				}
			}
			if(result)
			{
				effectList.add(effect);
				inBattleEffect.put(effect.id, effect);
				effect.setBeginTime(System.currentTimeMillis());
				changeUnusualEffectState(effect,true);
//				System.out.println("SpriteBattleTmp 352增加战斗内 buff..... "+ effect.name);
			}
			return result;
		}
	}
	
	public void deleteEffect(TimeEffect effect)
	{
		
	}
	
	private List getEffects(int type)
	{
		List list = new ArrayList();
		for (int i = 0; i < effectList.size(); i++) 
		{
			if(effectList.get(i) == null)
				continue;
			TimeEffect te = (TimeEffect) effectList.get(i);
			if(te.type == type)
				list.add(te);
		}
		return list;
	}
	
	public void removeEffect(TimeEffect effect)
	{
		effectList.remove(effect);
		inBattleEffect.remove(effect.id);
		changeUnusualEffectState(effect,false);
		if(currentController instanceof PlayerController)
			((PlayerController)currentController).sendAlwaysValue();
//		System.out.println("SpriteBattleTmp 328 删除战斗内 buff..... "+ effect.name);
	}
	
	public int EffectSize()
	{
		return effectList.size();
	}
	
	public boolean isEmptyEffect()
	{
		return EffectSize() <= 0;
	}

	public ByteBuffer getEffectBuffer()
	{
		return effectBuffer;
	}
	
	public void addEffectBuffer(ByteBuffer effectBuff)
	{
		if(effectBuff != null)
		{
			effectBuffer.writeBytes(effectBuff.getBytes());
			effectCount++;
		}
		else
		{
			effectBuffer = new ByteBuffer(10);
			effectCount = 0;
		}
	}
	
	public int getEffectCount()
	{
		return effectCount;
	}

	public void update(long timeMillis)
	{
		if(isAction)
			return;
		
		if(lastPingTime == 0)
		{
			lastPingTime = timeMillis;
			return;
		}
		if(lastPingTime + pCdTimer < timeMillis)
			isAction = true;
	}
	
	public abstract void processActiveSkill(ActiveSkill skill);
	
	
	/**
	 * 取得单纯伤害
	 * @param effect
	 * @return
	 */
	public int getDamageOnly(FlashEffect effect)
	{
		int result = 0;
		if(effect.dataPattern == 1) //数值
		{
			if(effect.dataType == 1) //当前生命力
			{
				result = effect.effectPoint;
				result = setDamage(result);
			}
			else if(effect.dataType == 2)  //当前精力
			{
				result = effect.effectPoint;
				currentSprite.setMagicPoint(result);
			}
		}
		else if(effect.dataPattern == 2)//百分比
		{
			if(effect.dataType == 1) //当前生命力
			{
				int mhp = 0;
				if(currentSprite instanceof Player)
				{
					Player player = (Player) currentSprite;
					EquipSet es = (EquipSet) player.getExtPlayerInfo("equipSet");
					mhp = es.getTotalAtt("maxHitPoint") + player.maxHitPoint;
				}
				else if(currentSprite instanceof Monster)
				{
					mhp = currentSprite.maxHitPoint;
				}
				result = mhp * effect.effectPoint / 100;
				result = setDamage(result);
			}
			else if(effect.dataType == 2)  //当前精力
			{
				int mmp = 0;
				if(currentSprite instanceof Player)
				{
					Player player = (Player) currentSprite;
					EquipSet es = (EquipSet) player.getExtPlayerInfo("equipSet");
					mmp = es.getTotalAtt("maxMagicPoint") + player.maxMagicPoint;
				}
				else if(currentSprite instanceof Monster)
				{
					mmp = currentSprite.maxMagicPoint;
				}
				result = mmp * effect.effectPoint / 100;
				currentSprite.setMagicPoint(result);
			}
		}
		return result;
	}
	
	
	public int setDamage(int damage)
	{

		if(damageTimeEffect != null)
		{
			int length = damageTimeEffect.dataType.length;
			for (int i = 0; i < length; i++)
			{
				if(damageTimeEffect.dataType[i].equals("0"))
					break;
				
				if(damageTimeEffect.dataType[i].equals("damageModify")) //伤害修改
				{
					if(damageTimeEffect.dataPattern[i] == 1) //数值
					{
						damage += damageTimeEffect.effectPoint[i]; 
					}
					else if(damageTimeEffect.dataPattern[i] == 2)//百分比
					{
						damage = damage * damageTimeEffect.effectPoint[i] /100;
					}
					break;
				}
			}
		}
		if(damage > 0)
			damage = 0;
		
		setDead(!currentSprite.setHitPoint(damage));
		
		return damage;
	}
	
	protected void processTimeEffectExt(TimeEffect effect, int index)
	{

		if(effect.dataType[index].equals("currentHP")) //加减血
		{
			if(effect.isFirstUse)
			{
				effect.isFirstUse = false;
				return;
			}
			setDamage(effect.effectPoint[index]/effect.interval);
		}
		else if(effect.dataType[index].equals("currentMP")) //加减魔力
		{
			if(effect.isFirstUse)
			{
				effect.isFirstUse = false;
				return;
			}
			currentSprite.setMagicPoint(effect.effectPoint[index]/effect.interval);
		}
		else if(effect.dataType[index].equals("dizzy")) //眩晕
		{
			setLocked(true);
		}
	}

	public void processTimeEffectEndExt(TimeEffect effect, int index)
	{
		if(effect.dataType[index].equals("currentHP")) //加减血
		{
			if(effect.isFirstUse)
			{
				effect.isFirstUse = false;
				return;
			}
			setDamage(effect.effectPoint[index]/effect.interval);
		}
		else if(effect.dataType[index].equals("currentMP")) //加减魔力
		{
			if(effect.isFirstUse)
			{
				effect.isFirstUse = false;
				return;
			}
			currentSprite.setMagicPoint(effect.effectPoint[index]/effect.interval);
		}
		else if(effect.dataType[index].equals("dizzy")) //眩晕
		{
			setLocked(false);
		}
	}
	
	/**
	 * 加血效果
	 * @param targetSprite
	 * @param flashEffect
	 * @return
	 */
	public int pointUp(FlashEffect flashEffect)
	{
		int resultPoint = 0;
		if(flashEffect.dataPattern == 1) //数值
		{
			if(flashEffect.dataType == 1) //当前生命力
			{
				resultPoint += flashEffect.effectPoint;
				currentSprite.setHitPoint(resultPoint);
			}
			else if(flashEffect.dataType == 2)  //当前精力
			{
				resultPoint += flashEffect.effectPoint;
				currentSprite.setMagicPoint(resultPoint);
			}
			else if(flashEffect.dataType == 2)//生命力，精力
			{
				resultPoint += flashEffect.effectPoint;
				currentSprite.setHitPoint(resultPoint);
				currentSprite.setMagicPoint(resultPoint);
			}
		}
		else if(flashEffect.dataPattern == 2)//百分比
		{
			if(flashEffect.dataType == 1) //当前生命力
			{
				int mhp = 0;
				if(currentSprite instanceof Player)
				{
					Player player = (Player) currentSprite;
					EquipSet es = (EquipSet) player.getExtPlayerInfo("equipSet");
					mhp = currentSprite.maxHitPoint + es.getTotalAtt("maxHitPoint");
				}
				else if(currentSprite instanceof Monster)
				{
					mhp = currentSprite.maxHitPoint;
				}
				resultPoint += mhp * flashEffect.effectPoint / 100;
				currentSprite.setHitPoint(resultPoint);
			}
			else if(flashEffect.dataType == 2)  //当前精力
			{
				int mmp = 0;
				if(currentSprite instanceof Player)
				{
					Player player = (Player) currentSprite;
					EquipSet es = (EquipSet) player.getExtPlayerInfo("equipSet");
					mmp = currentSprite.maxMagicPoint + es.getTotalAtt("maxMagicPoint");
				}
				else if(currentSprite instanceof Monster)
				{
					mmp = currentSprite.maxMagicPoint;
				}
				resultPoint += mmp * flashEffect.effectPoint / 100;
				currentSprite.setMagicPoint(resultPoint);
			}
			else if(flashEffect.dataType == 2)//生命力，精力
			{
				int mmp = 0,mhp = 0;
				if(currentSprite instanceof Player)
				{
					Player player = (Player) currentSprite;
					EquipSet es = (EquipSet) player.getExtPlayerInfo("equipSet");
					mmp = currentSprite.maxMagicPoint + es.getTotalAtt("maxMagicPoint");
					mhp = currentSprite.maxHitPoint + es.getTotalAtt("maxHitPoint");
				}
				else if(currentSprite instanceof Monster)
				{
					mmp = currentSprite.maxMagicPoint;
					mhp = currentSprite.maxHitPoint;
				}
				mmp += mmp * flashEffect.effectPoint / 100;
				currentSprite.setMagicPoint(mmp);

				mhp += mhp * flashEffect.effectPoint / 100;
				currentSprite.setHitPoint(mhp);
			}
		}
		return resultPoint;	
	}
	
	/**
	 * 设置技能释放对象
	 */
	public void setSkillTarget(SpriteController target)
	{
		targetPlayer = null;
		targetMonster = null;
		if(target instanceof PlayerController)
			targetPlayer = (PlayerController)target;
		else if(target instanceof MonsterController)
			targetMonster = (MonsterController)target;
	}

	
	public int getSkillTargeType()
	{
		if(targetPlayer != null)
			return ActiveSkill.TARGET_TYPE_PLAYERS;
		else if(targetMonster != null)
			return ActiveSkill.TARGET_TYPE_MONSTERS;
		else 
			return ActiveSkill.ERROR;
	}

	public void setSpriteController(SpriteController currentController)
	{
		this.currentController = currentController;	
	}
	
	public void setSprite(Sprite currentSprite)
	{
		this.currentSprite = currentSprite;
	}
	

	
	//给予百分之30的随机互动伤害
	public int getRamdomDamage(int damage)
	{
		int t = damage / 3;
		return (int)(Math.random()*(t*2))+(damage-t);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//-----------------------------------------------------------------------------------------
	
	/**
	 * 当瞬时效果对怪物和玩家使用
	 * @return
	 */
	public boolean onFlashEffectUse(FlashEffect effect)
	{
		int targetType = getSkillTargeType();
		
		if(targetType == Skill.TARGET_TYPE_PLAYERS) //目标是玩家
		{
			PlayerBattleTmp pbt = (PlayerBattleTmp)targetPlayer.getAttachment();
			
			pbt.updateBattleTmp(currentSprite);
			
			ByteBuffer buffer = new ByteBuffer(10);
			buffer.writeByte(effect.type);
			
			if(effect.type == FlashEffect.FE_TYPE_ATTACK) //攻击
			{
				int rdp = 0;
				if(currentController instanceof PlayerController)
				{
					if(baseInfo.isNoDefAtt())
					{
						rdp = baseInfo.phsAtt;
						rdp = pbt.setDamage(-rdp);
					}
					else
					{
						rdp = getTotalDamageByPlayer(effect);
//							System.out.println("对玩家造成固定伤害："+(-rdp));
						rdp = pbt.setDamage(rdp);
//							System.out.println("对玩家造成伤害："+rdp);
					}
				}
				else if(currentController instanceof MonsterController)
				{
					MonsterController mc = (MonsterController) currentController;
					if(mc.getMonster().isNoDefAtt())
					{
						rdp = ((MonsterBattleTmp)currentController.getAttachment()).getDamagePointByHit(0, 0);
						rdp = pbt.setDamage(-rdp);
					}
					else
					{
						rdp = getTotalDamageByPlayer(effect);
//							System.out.println("对玩家造成固定伤害："+(-rdp));
						rdp = pbt.setDamage(rdp);
//							System.out.println("对玩家造成伤害："+rdp);
					}
				}
				buffer.writeInt(rdp);
			}
			else if(effect.type == FlashEffect.FE_TYPE_CURE) //治疗
			{
				if(pbt.isDead())
					return false;
				setAddLifePlayer();
				
				int curePoint = pbt.pointUp(effect);
				int p = 0;
				if(currentSprite instanceof Player)
				{
					Player player = (Player) currentSprite;
					EquipSet es = (EquipSet) player.getExtPlayerInfo("equipSet");
					if(effect.cureType == 1)
						p = es.getTotalAtt("curePoint") + player.getBaseInfo().curePoint;
				}
				if(effect.dataType == 1)
					pbt.getPlayer().setHitPoint(p);
				else if(effect.dataType == 3)
				{
					pbt.getPlayer().setHitPoint(p);
				}
//				System.out.println("加血or加蓝："+curePoint);
//				System.out.println("治疗值："+p);
				buffer.writeInt(curePoint + p);
			}
			else if(effect.type == FlashEffect.FE_TYPE_DAMAGE) //伤害
			{
				int damage = pbt.getDamageOnly(effect);
//				System.out.println("伤害："+damage);
				buffer.writeInt(damage);
			}
			else if(effect.type == FlashEffect.FE_TYPE_WISDOM_DAMAGE)//调用智慧瞬时伤害
			{
				int wisdomDamge = baseInfo.wisdom * effect.effectPoint/100;
				pbt.setDamage(wisdomDamge);
				buffer.writeInt(wisdomDamge);
			}
			else if(effect.type == FlashEffect.FE_TYPE_SPIRIT_DAMAGE)//调用精神瞬时伤害
			{
				int sptDamage = baseInfo.spirit * effect.effectPoint/100;
				pbt.setDamage(sptDamage);
				buffer.writeInt(sptDamage);
			}
			else if(effect.type == FlashEffect.FE_TYPE_DRUG_RELIVE)//x%血蓝复活
			{
				if(!pbt.isDead())
					return false;
				EquipSet es = (EquipSet) pbt.getPlayer().getExtPlayerInfo("equipSet");
				int hitPoint = (pbt.getPlayer().maxHitPoint+es.getTotalAtt("maxHitPoint")) * effect.effectPoint / 100;
				int magicPoint = 0;
				pbt.setDead(!pbt.getPlayer().setHitPoint(hitPoint));
				if(pbt.getPlayer().magicPoint < (pbt.getPlayer().maxMagicPoint+es.getTotalAtt("maxMagicPoint")) * effect.effectPoint / 100)
				{
					magicPoint = (pbt.getPlayer().maxMagicPoint+es.getTotalAtt("maxMagicPoint")) * effect.effectPoint / 100;
					pbt.getPlayer().magicPoint = magicPoint;
				}
				buffer.writeInt(hitPoint);
				buffer.writeInt(magicPoint);
			}
			else if(effect.type == FlashEffect.FE_TYPE_ATTACK_DAMAGE)//调用攻击瞬时伤害
			{
				int attDamage = baseInfo.phsAtt * effect.effectPoint/100;
				pbt.setDamage(attDamage);
				buffer.writeInt(attDamage);
			}
			else if(effect.type == FlashEffect.FE_TYPE_SPIRIT_CURE)//调用精神进行治疗
			{
				if(pbt.isDead())
					return false;
				int sptCure = baseInfo.spirit * effect.effectPoint/100;
				pbt.getPlayer().setHitPoint(sptCure);
				buffer.writeInt(sptCure);
			}
			else if(effect.type == FlashEffect.FE_TYPE_CLEAR_CDTIME)//清除CD
			{
//				System.out.println("清除目标玩家所有技能的CD时间："+targetPlayer.getName());
				SkillTome skillTome = (SkillTome) targetPlayer.getPlayer().getExtPlayerInfo("skillTome");
				ActiveSkill[] aSkills = skillTome.getActiveSkills();
				for (int i = 0; i < aSkills.length; i++)
				{
					aSkills[i].CDTimer = 0;
				}
			}
			else if(effect.type == FlashEffect.FE_TYPE_CANCEL_NEGBUFF)//取消所有负面效果
			{
				List list = pbt.getEffectList();
				List negBuff = new ArrayList(list.size());
				for (int i = 0; i < list.size(); i++)
				{
					if(list.get(i) instanceof TimeEffect)
					{
						TimeEffect te = (TimeEffect) list.get(i);
						if(te.buffType == 2)
							negBuff.add(te);
					}
				}
				if(negBuff.size() > 0)
					battle.removeEffect(negBuff, pbt);
			}
			
			buffer.writeByte(effect.dataType);
			buffer.writeByte(pbt.getTeamNo());
			buffer.writeByte(pbt.getIndex());
			
			addEffectBuffer(buffer);
		}
		else if(targetType == Skill.TARGET_TYPE_MONSTERS) //目标是怪物
		{
			MonsterBattleTmp mbt = (MonsterBattleTmp)targetMonster.getAttachment();
			
			//负面BUFF，设置怪物AI
			setNetBuffPlayer(effect,mbt);
			
			ByteBuffer buffer = new ByteBuffer(10);
			buffer.writeByte(effect.type);
			if(effect.type == FlashEffect.FE_TYPE_ATTACK)
			{ 
				int rdp = 0;
				if(currentController instanceof PlayerController)
				{
					if(baseInfo.isNoDefAtt())
					{
						rdp = baseInfo.phsAtt;
						rdp = mbt.setDamage(-rdp);
					}
					else
					{
						rdp = getTotalDamageByMonster(effect);
						rdp = getRamdomDamage(-rdp);
						rdp = mbt.setDamage(-rdp);
					}
				}
				buffer.writeInt(rdp); 
			}
			else if(effect.type == FlashEffect.FE_TYPE_DAMAGE) //伤害
			{
				int damage = mbt.getDamageOnly(effect);
//				System.out.println("damage:"+damage);
				buffer.writeInt(damage);
			}
			else if(effect.type == FlashEffect.FE_TYPE_WISDOM_DAMAGE)//调用智慧瞬时伤害
			{
				int wisdomDamge = baseInfo.wisdom * effect.effectPoint/100;
				mbt.setDamage(wisdomDamge);
				buffer.writeInt(wisdomDamge);
			}
			else if(effect.type == FlashEffect.FE_TYPE_SPIRIT_DAMAGE)//调用精神瞬时伤害
			{
				int sptDamage = baseInfo.spirit * effect.effectPoint/100;
				mbt.setDamage(sptDamage);
				buffer.writeInt(sptDamage);
			}
			else if(effect.type == FlashEffect.FE_TYPE_ATTACK_DAMAGE)//调用攻击瞬时伤害
			{
				int attDamage = baseInfo.phsAtt * effect.effectPoint/100;
				mbt.setDamage(attDamage);
				buffer.writeInt(attDamage);
			}
			else if(effect.type == FlashEffect.FE_TYPE_ADD_MONSTER_HATRED)//增加所有怪物对自己的仇恨
			{
				if(battle instanceof PVEController && currentController instanceof PlayerController)
				{
					PVEController pve = (PVEController) battle;
					PlayerController player = (PlayerController) currentController;
					MonsterController[] mcs = pve.getMonsters();
					for (int i = 0; i < mcs.length; i++)
					{
						MonsterBattleTmp mt = (MonsterBattleTmp) mcs[i].getAttachment();
						if(mt.isDead())
							continue;
						mt.setHatred(effect.effectPoint, pve.getPlayerIndex(player));
					}
				}
			}
			buffer.writeByte(effect.dataType);
			buffer.writeByte(mbt.getTeamNo());
			buffer.writeByte(mbt.getIndex()); 

			addEffectBuffer(buffer);
		}
		
		return true;
	}
	
	
	
	protected abstract int getTotalDamageByMonster(FlashEffect effect);
	
	protected abstract int getTotalDamageByPlayer(FlashEffect effect);
	
	
	
	/**
	 * 设定其他目标
	 */
	protected boolean setNextPlayer()
	{
		PlayerController [] everyone = null;
		
		if(battle instanceof PVEController)
		{
			PVEController pve = (PVEController)battle;
			everyone = pve.getPlayers();
		}
		else if(battle instanceof PVPController)
		{
			PVPController pvp = (PVPController)battle;
			if(teamNo == BattleController.TEAM1)
				everyone = pvp.getTargetPlayers();
			else if(teamNo == BattleController.TEAM2)
				everyone = pvp.getPlayers();
		}
		if(everyone == null)
			return false;
		int length = everyone.length;
		for(int i = 0 ; i < length ; i ++)
		{
			if(everyone[i] == null)
				continue;
			
			if(everyone[i].getAttachment().isDead())
				continue;
			
			setTargetPlayer(everyone[i]);
			return true;
		}
		return false;
	}
	
	
	/**
	 * 设定其他怪物目标
	 */
	protected boolean setNextMonster()
	{
		PVEController pve = (PVEController)battle;
		MonsterController [] monsters = pve.getMonsters();
		int length = monsters.length;
		
		for(int i = 0 ; i < length ; i ++)
		{
			if(monsters[i] == null)
				continue;
			
			if(monsters[i].getAttachment().isDead())
				continue;
			
			setTargetMonster(monsters[i]);
			return true;
		}
		return false;
	}
	
	
	public void setTargetPlayer(PlayerController targetPlayer)
	{
		this.targetPlayer = targetPlayer;
	}
	
	public void setTargetMonster(MonsterController targetMonster)
	{
		this.targetMonster = targetMonster;
	}
	
	/**
	 * 除了主打人以外的其他人
	 * @param effect
	 * @param effectRangeList
	 */
	protected void hitMorePlayerByEffect(Effect effect, int effectRangeList)
	{
		
		PlayerController [] playerArray  = null; 

		if(battle instanceof PVEController)
		{
			playerArray =  ((PVEController)battle).getPlayers();
		}
		else if(battle instanceof PVPController)
		{
			if(teamNo == BattleController.TEAM1)
				playerArray = ((PVPController)battle).getPlayers();
			else
				playerArray = ((PVPController)battle).getTargetPlayers();
		}
		
		if(playerArray == null)
			return;
	
		int length = playerArray.length;
		
		if(targetPlayer == null)
			return;
		
		PlayerBattleTmp pbt = (PlayerBattleTmp)targetPlayer.getAttachment();
		
		for (int i = 0; i < length; i++)
		{
			if(pbt.getIndex() == i)
				continue;
			
			if(playerArray[i].getAttachment().isDead())
				continue;
			
			if(--effectRangeList <= 0)
				break;
			
			setTargetPlayer(playerArray[i]);
			if(effect instanceof FlashEffect)
				onFlashEffectUse((FlashEffect)effect);
			else if(effect instanceof TimeEffect)
				onTimeEffectUse((TimeEffect)effect);
		}

	}
	
	/**
	 * 把效果使用到除了主打怪以外的怪上
	 * @param effect
	 * @param effectRangeList
	 */
	protected void hitMoreMonsterByEffect(Effect effect, int effectRangeList)
	{
		if(battle instanceof PVPController)
		{
			PlayerController [] playerArray  = null; 
			
			if(teamNo == BattleController.TEAM1)
				playerArray = ((PVPController)battle).getTargetPlayers();
			else
				playerArray = ((PVPController)battle).getPlayers();
			
			if(playerArray == null)
				return;
		
			int length = playerArray.length;
			
			if(targetPlayer == null)
				return;
			
			PlayerBattleTmp pbt = (PlayerBattleTmp)targetPlayer.getAttachment();
			
			for (int i = 0; i < length; i++)
			{
				if(pbt.getIndex() == i)
					continue;
				
				if(playerArray[i].getAttachment().isDead())
					continue;
				
				if(--effectRangeList <= 0)
					break;
				
				setTargetPlayer(playerArray[i]);
				if(effect instanceof FlashEffect)
					onFlashEffectUse((FlashEffect)effect);
				else if(effect instanceof TimeEffect)
					onTimeEffectUse((TimeEffect)effect);
			}
		}
		else if(battle instanceof PVEController)
		{
			MonsterController [] monsterArray = ((PVEController)battle).getMonsters();
			int length = monsterArray.length;
			
			if(targetMonster == null)
				return;
			
			MonsterBattleTmp mbt = (MonsterBattleTmp)targetMonster.getAttachment();
			
			for(int i = 0 ; i < length ; i ++)
			{

				if(mbt.getIndex() == i)
					continue;
				
				if(monsterArray[i].getAttachment().isDead())
					continue;
				
				
				if(--effectRangeList <= 0)
					break;
				
				
				setTargetMonster(monsterArray[i]);
				if(effect instanceof FlashEffect)
					onFlashEffectUse((FlashEffect)effect);
				else if(effect instanceof TimeEffect)
					onTimeEffectUse((TimeEffect)effect);
			}
		}
	}
	
	
	/**
	 * 使用持续效果
	 * @param effect
	 * @return
	 */
	public boolean onTimeEffectUse(TimeEffect effect)
	{
		int targetType = getSkillTargeType();

		if(targetType == Skill.TARGET_TYPE_PLAYERS) //目标是玩家
		{
			PlayerBattleTmp pbt = (PlayerBattleTmp)targetPlayer.getAttachment();
			
			pbt.updateBattleTmp(currentSprite);
			
			ByteBuffer buffer = new ByteBuffer(10);
			
			buffer.writeUTF(effect.name);
			buffer.writeInt((int)effect.duration);//效果时间
			buffer.writeInt(effect.interval);//次数
			buffer.writeByte(pbt.getTeamNo());
			buffer.writeByte(pbt.getIndex());
			buffer.writeBoolean(effect.isOutBattle);
			buffer.writeByte(effect.buffType);
			
			if(pbt.isTimeEffectInvain)
			{
				if(effect.buffType == 2)//负面buff失效
				{
					buffer.writeByte(1);
					buffer.writeUTF(effect.dataType[0]); 
					buffer.writeInt(-1); 
					addEffectBuffer(buffer);
					return false;
				}
			}

			if(effect.isOutBattle)
			{

				int count = 0;
				
				for (int i = 0; i < effect.dataType.length; i++)
				{
					if(effect.dataType[i].equals("0"))
					{
						break;
					}
					else if(isOtherEffect(effect.dataType[i]))
					{
						continue;
					}
					count++;
				}
				buffer.writeByte(count);
				
				TimeEffect nte = new TimeEffect();
				effect.copyTo(nte);
				
				boolean flag = pbt.getBuffBox().addEffect(nte);

				for(int i = 0 ; i < effect.dataType.length ; i ++)
				{
					
					if(effect.dataType[i].equals("0"))
					{
						break;
					}
					
					int point = 0;
					int addPoint = 0;
					
//					System.out.println("1037"+flag);
					if(flag)
					{
						if(effect.dataType[i].equals("noDefAtt"))
						{
							pbt.getBaseInfo().setNoDefAtt(true);
						}
						else if(isOtherEffect(effect.dataType[i]))
						{
							continue;
						}
						else
						{
							int currPoint = Integer.parseInt(pbt.getPlayer().getBaseInfo().getVariable(effect.dataType[i]));
//							System.out.println("SpriteBattleTmp 1064 currPoint="+currPoint+"  dataType="+effect.dataType[i]+" player name"+pbt.getPlayer().name);
							if(effect.dataPattern[i] == 1)
							{
								addPoint = effect.effectPoint[i];
							}
							else if(effect.dataPattern[i] == 2)
							{
								addPoint = (currPoint*effect.effectPoint[i]/100);
							}
							if(effect.dataType[i].equals("speed"))
							{
								point = addPoint + pbt.getCDTimer();
								if(point < 0)
									point = 0;
								pbt.setCDTimer(point);
							}
							else if(effect.dataType[i].equals("currentHP"))
							{
								if(pbt.getPlayer().hitPoint < -addPoint)
									pbt.setDead(!pbt.getPlayer().setHitPoint(addPoint));
							}
							else
							{
								point = addPoint + currPoint;
								if(point < 0)
									point = 0;
								pbt.getPlayer().getBaseInfo().setVariable(effect.dataType[i], String.valueOf(point));
							}
								
							
							if(nte.interval == 0)
								nte.setPoint(i,addPoint);
							
							pbt.getPlayer().getBaseInfo().updateLifeValue(addPoint, effect.dataType[i]);
//							System.out.println("SpriteBattleTmp 1075 point="+point+"  dataType="+effect.dataType[i]+" player name"+pbt.getPlayer().name);
						}
					}
				
					buffer.writeUTF(effect.dataType[i]); // 上升效果
					buffer.writeInt(addPoint); // 上升点数
				}
			}
			else
			{
				//在战斗中的buff
				int count = 0;
				
				for (int i = 0; i < effect.dataType.length; i++)
				{
					if(effect.dataType[i].equals("0"))
						break;
					
					else if(isOtherEffect(effect.dataType[i]))
					{
						continue;
					}
					count++;
				}
				buffer.writeByte(count);
				
				
				TimeEffect nte = new TimeEffect();
				effect.copyTo(nte);
				
				boolean isAdd = pbt.addEffect(nte);

				for(int i = 0 ; i < count ; i ++)
				{
					
					int point = 0;
					int addPoint = 0;
					if(isAdd)
					{
						if(effect.dataType[i].equals("noDefAtt"))
						{
							pbt.getBaseInfo().setNoDefAtt(true);
						}
						else if(isOtherEffect(effect.dataType[i]))
						{
							continue;
						}
						else
						{
							int currPoint = Integer.parseInt(pbt.getPlayer().getBaseInfo().getVariable(effect.dataType[i]));
//							System.out.println("SpriteBattleTmp 1148 currPoint="+currPoint+"  dataType="+effect.dataType[i]);
							if(effect.dataPattern[i] == 1)
							{
								addPoint = effect.effectPoint[i];
							}
							else if(effect.dataPattern[i] == 2)
							{
								addPoint = (currPoint*effect.effectPoint[i]/100);
								
							}
							if(effect.dataType[i].equals("speed"))
							{
								point = addPoint + pbt.getCDTimer();
								if(point < 0)
									point = 0;
								pbt.setCDTimer(point);
							}
							else if(effect.dataType[i].equals("currentHP"))
							{
								if(pbt.getPlayer().hitPoint < -addPoint)
									pbt.setDead(!pbt.getPlayer().setHitPoint(addPoint));
							}
							else
							{
								point = addPoint+currPoint;
								if(point < 0)
									point = 0;
								pbt.getPlayer().getBaseInfo().setVariable(effect.dataType[i], String.valueOf(point));
							}
							
							if(effect.interval == 0)
								nte.setPoint(i,addPoint);
					
							pbt.getPlayer().getBaseInfo().updateLifeValue(addPoint, effect.dataType[i]);
//							System.out.println("SpriteBattleTmp 1163 currPoint="+currPoint+"  dataType="+effect.dataType[i]);
						}
					}
						
					buffer.writeUTF(effect.dataType[i]); // 上升效果
					buffer.writeInt(addPoint); // 上升点数	
//					System.out.println("不带出战斗的BUFF/////"+effect.dataType[i]+"   点数："+point);
				}
			}
			addEffectBuffer(buffer);
		}
		else if(targetType == Skill.TARGET_TYPE_MONSTERS) //目标是怪物
		{
			
			MonsterBattleTmp mbt = (MonsterBattleTmp)targetMonster.getAttachment();
			
			//负面BUFF，设置怪物AI
			setNetBuffPlayer(effect,mbt);
			
			ByteBuffer buffer = new ByteBuffer(10);
			
			buffer.writeUTF(effect.name);
			buffer.writeInt((int)effect.duration);//效果时间
			buffer.writeInt(effect.interval);//次数
			buffer.writeByte(mbt.getTeamNo());
			buffer.writeByte(mbt.getIndex());
			buffer.writeBoolean(effect.isOutBattle);
			buffer.writeByte(effect.buffType);
			
			if(mbt.isTimeEffectInvain)
			{
				if(effect.buffType == 2)//负面buff失效
				{
					buffer.writeByte(1);
					buffer.writeUTF(effect.dataType[0]); 
					buffer.writeInt(-1); 
					addEffectBuffer(buffer);
					return false;
				}
			}
		
			//在战斗中的buff
			int count = 0;
			
			for (int i = 0; i < effect.dataType.length; i++)
			{
				if(effect.dataType[i].equals("0"))
					break;
				else if(isOtherEffect(effect.dataType[i]))
				{
					continue;
				}
				count++;
			}
			buffer.writeByte(count);


			TimeEffect nte = new TimeEffect();
			effect.copyTo(nte);
			
			boolean isAdd = mbt.addEffect(nte);

			for(int i = 0 ; i < count ; i ++)
			{
				int point = 0;
				int addPoint = 0;
				if(isAdd)
				{
					if(effect.dataType[i].equals("noDefAtt"))
					{
						mbt.getMonster().setNoDefAtt(true);
					}
					else if(isOtherEffect(effect.dataType[i]))
					{
						continue;
					}
					else 
					{
						int currPoint = Integer.parseInt(targetMonster.getMonster().getVariable(effect.dataType[i]));
	
						if(effect.dataPattern[i] == 1)
						{
							addPoint = effect.effectPoint[i];
							
						}
						else if(effect.dataPattern[i] == 2)
						{
							addPoint = (currPoint*effect.effectPoint[i]/100);
						}
						if(effect.dataType[i].equals("speed"))
						{
							point = addPoint + mbt.getCDTimer();
							if(point < 0)
								point = 0;
							mbt.setCDTimer(point);
						}
						else if(effect.dataType[i].equals("currentHP"))
						{
							if(mbt.getMonster().hitPoint < -addPoint)
								mbt.setDead(!mbt.getMonster().setHitPoint(addPoint));
						}
						else
						{
							point = currPoint+addPoint;
							if(point < 0)
								point = 0;
							targetMonster
							.getMonster().setVariable
							(effect.dataType[i], String.valueOf(point));
						}
						
						if(effect.interval == 0)
						{
							targetMonster.getMonster().updateMoreValue();
							nte.setPoint(i,addPoint);
						}
	
					}
				}

				buffer.writeUTF(effect.dataType[i]); // 上升效果
				buffer.writeInt(addPoint); // 上升点数
			}
			addEffectBuffer(buffer);
		}
		return true;
	}
	
	
	
	public void pack(ByteBuffer buffer)
	{
		ByteBuffer buff = getEffectBuffer();
		
		if(buff == null)
			return;
		
		buffer.writeByte(effectCount);
		buffer.writeBytes(buff.getBytes());
		addEffectBuffer(null);
	}
	
	
	protected boolean changeTarget()
	{
		int targetType = getSkillTargeType();
		
		if(targetType == ActiveSkill.TARGET_TYPE_PLAYERS)
		{
			if(!setNextPlayer())
			{
				battle.checkDeadState();
				return false;
			}
		}
		else if(targetType == ActiveSkill.TARGET_TYPE_MONSTERS)
		{
			if(!setNextMonster())
			{
				battle.checkDeadState();
				return false;
			}
		}
		return true;
	}

	
	/**
	 * 如果有对怪物释放负面BUFF，则把这个玩家设置为怪物的下一个目标
	 * @param effect
	 * @param mbt
	 */
	public void setNetBuffPlayer(Effect effect,MonsterBattleTmp mbt)
	{
		if(effect instanceof FlashEffect)
		{
			FlashEffect fe = (FlashEffect) effect;
			if(fe.effectPoint < 0)
			{
				if(battle instanceof PVEController)
				{
					PVEController pve = (PVEController) battle;
					if(currentController instanceof PlayerController)
					{
						PlayerController target = (PlayerController) currentController;
						if(mbt.getMonster().getMonsterAI() != null)
							mbt.getMonster().getMonsterAI().setNegBuffPlayer(pve.getPlayerIndex(target));
					}
				}
			}
		}
		else if(effect instanceof TimeEffect)
		{
			TimeEffect te = (TimeEffect) effect;
			//负面BUFF，设置怪物AI
			if(te.buffType == 2)
			{
				if(battle instanceof PVEController)
				{
					PVEController pve = (PVEController) battle;
					if(currentController instanceof PlayerController)
					{
						PlayerController target = (PlayerController) currentController;
						if(mbt.getMonster().getMonsterAI() != null)
							mbt.getMonster().getMonsterAI().setNegBuffPlayer(pve.getPlayerIndex(target));
					}
				}
			}
		}
	}
	
	/**
	 * 如果有玩家恢复血或则给别的玩家加血，则设置为怪物的下一个目标
	 * @param battle
	 */
	public void setAddLifePlayer()
	{
		if(battle instanceof PVEController)
		{
			PVEController pve = (PVEController) battle;
			MonsterController[] monsters = pve.getMonsters();
			for (int i = 0; i < monsters.length; i++) 
			{
				if(currentController instanceof PlayerController)
				{
					PlayerController target = (PlayerController) currentController;
					if(monsters[i].getMonster().getMonsterAI() != null)
					{
						monsters[i].getMonster().getMonsterAI().setAddLifeToOtherPlayer(pve.getPlayerIndex(target));
						monsters[i].getMonster().getMonsterAI().setComebackLifePlayer(pve.getPlayerIndex(target));
					}
				}
			}
		}
	}
	
	public BuffBox getBuffBox()
	{
		return this.buffBox;
	}
	
	public List getEffectList()
	{
		return effectList;
	}
	
	
	/**
	 * 失败方掉宝
	 * @param sbt
	 */
	public void loserMercy(SpriteBattleTmp sbt)
	{
		if(sbt instanceof MonsterBattleTmp)
		{
			MonsterBattleTmp mbt = (MonsterBattleTmp) sbt;
			Monster monster = mbt.getMonster();
			MonsterDropProp taskDP = mbt.getMonster().getTaskDropProp();
			MonsterDropProp commDP = mbt.getMonster().getMonsterDropProp();
			monsterMercy(taskDP,monster,2);
			monsterMercy(commDP,monster,1);
		}
	}
	
	/**
	 * 怪物慈悲(掉宝)
	 */
	private void monsterMercy(MonsterDropProp mdp,Monster monster,int type)
	{
		if(mdp == null)
		{
//			System.out.println("此怪物没有物品掉落！");
			return;
		}
		int count = 0;
		for (int i = 0; i < battle.getPlayerCount(); i++) 
		{
			if( battle.getPlayerList().get(i) == null)
				continue;
			PlayerController player = (PlayerController) battle.getPlayerList().get(i);
			count += player.getPlayer().level;
		}
		if(count != 0)
		{
			int pVeLevel = 0;//怪物与玩家平均等级之差
			int avrLevel = count/battle.getPlayerCount();
			if(avrLevel > monster.level)
				pVeLevel = avrLevel - monster.level;
			else
				pVeLevel = monster.level - avrLevel;
			int dropMoney = mdp.getRandomMoney(pVeLevel);
			battle.setBattlePoint(dropMoney);
			
			List goodsList = mdp.getDropProp(pVeLevel, monster,type);
			for (int i = 0; i < goodsList.size(); i++) 
			{
				Goods goods = (Goods) goodsList.get(i);
				battle.setBattleGoods(goods);
			}
		}
	} 
	
	
	public boolean isOtherEffect(String dataType)
	{
		boolean result = false;
		if(dataType.equals("chaos") || dataType.equals("damageModify")
				|| dataType.equals("timeEffectInvain") || dataType.equals("dizzy")
				|| dataType.equals("battleMaxHP") || dataType.equals("battleMaxMP"))
		{
			result = true;
		}
		return result;
	}
	

	
}
