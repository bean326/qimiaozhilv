package cc.lv1.rpg.gs.entity;

import vin.rabbit.util.ByteBuffer;
import vin.rabbit.util.Utils;
import vin.rabbit.util.collection.impl.ArrayList;
import cc.lv1.rpg.gs.data.DataFactory;
import cc.lv1.rpg.gs.entity.impl.Goods;
import cc.lv1.rpg.gs.entity.impl.goods.GoodsEquip;
import cc.lv1.rpg.gs.entity.impl.goods.GoodsProp;

/**
 * 交易中心
 * @author dxw
 *
 */
public class ShopCenter implements vin.rabbit.comm.i.IDatabaseHandle
{
	
	public static int MAX = 2000;
	
	private static ShopCenter sc;
	
	private ArrayList goodsList = new ArrayList(500);
	
	private ArrayList overdueGoods = new ArrayList(1000);
	
	private ShopCenter()
	{
	}
	
	public static ShopCenter getInstance()
	{
		if(sc == null)
			sc = new ShopCenter();
		return sc;
	}
	
	
	public boolean isShopFull()
	{
		return goodsList.size() > MAX;
	}
	
	
	public void addGoodsToShop(Goods goods)
	{

	}

	
	public void loadFrom(ByteBuffer buffer)
	{
		int count = buffer.readInt();
		for (int i = 0; i < count; i++) 
		{
			int id = buffer.readInt();
			long objectIndex = buffer.readLong();
			int type = buffer.readInt();
			int goodsCount = buffer.readInt();
			int quality = buffer.readInt();
			int location = buffer.readInt();
			
			Goods goods = (Goods)DataFactory.getInstance().getGameObject(id);
			Goods newGoods = (Goods) Goods.cloneObject(goods);
			
			newGoods.objectIndex = objectIndex;
			newGoods.type = type;
			newGoods.goodsCount = goodsCount;
			newGoods.id = id;
			newGoods.quality = quality;
			if(newGoods instanceof GoodsEquip)
			{
				String attStr = buffer.readUTF();
				((GoodsEquip)newGoods).attStr = attStr;
				if(!attStr.isEmpty())
				{
					String[] str = Utils.split(attStr, ":");
					for (int j = 0; j < str.length; j++) {
						newGoods.setVariable(str[j],String.valueOf(buffer.readInt()));
					}
				}
				((GoodsEquip)newGoods).setDefault(((GoodsEquip)newGoods), newGoods.quality);
			}
			else if(newGoods instanceof GoodsProp)
			{
				if(id == 900000)
					((GoodsProp)newGoods).boxType = 1 ;
				else if(id == 800000)
					((GoodsProp)newGoods).boxType = 2 ;
				else if(id == 700000)
					((GoodsProp)newGoods).boxType = 3 ;
				else if(id == 600000)
					((GoodsProp)newGoods).boxType = 4 ;
				
				((GoodsProp)newGoods).useCount = buffer.readByte();
				((GoodsProp)newGoods).roomId = buffer.readInt();
			}
			
			goodsList.set(location, newGoods);
			
		}
		
	}

	
	public void saveTo(ByteBuffer buffer)
	{
		int count = 0;
		for (int i = 0; i < goodsList.size(); i++)
		{
			if(goodsList.get(i) != null)
				count++;
		}
		buffer.writeInt(count);
		for (int i = 0; i < goodsList.size(); i++)
		{
			if(goodsList.get(i) != null)
				continue;
			Goods goods = (Goods) goodsList.get(i);
			buffer.writeInt(goods.id);
			buffer.writeUTF(goods.objectIndex+"");
			buffer.writeInt(goods.type);
			buffer.writeInt(goods.goodsCount);
			buffer.writeInt(goods.quality);
			buffer.writeInt(i);
			
			if(goods instanceof GoodsEquip)
			{
				GoodsEquip equip = (GoodsEquip) goods;
				buffer.writeUTF(equip.attStr);
				if(!equip.attStr.isEmpty())
				{
					String[] str = Utils.split(equip.attStr, ":");
					for (int k = 0; k < str.length; k++) 
					{
						buffer.writeInt(Integer.parseInt(equip.getVariable(str[k])));
					}
				}
			}
			else
			{
				GoodsProp prop = (GoodsProp) goods;
				buffer.writeByte(prop.useCount);
				buffer.writeInt(prop.roomId);
			}
		}
		
	}

	
}
