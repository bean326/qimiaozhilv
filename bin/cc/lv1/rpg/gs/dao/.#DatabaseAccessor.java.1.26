package cc.lv1.rpg.gs.dao;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.text.SimpleDateFormat;

import vin.rabbit.util.ByteBuffer;
import vin.rabbit.util.Utils;
import vin.rabbit.util.collection.i.List;
import vin.rabbit.util.collection.impl.ArrayList;
import vin.rabbit.util.connection.ConnectionFactory;
import cc.lv1.rpg.gs.GameServer;
import cc.lv1.rpg.gs.WorldManager;
import cc.lv1.rpg.gs.entity.ext.Bag;
import cc.lv1.rpg.gs.entity.impl.Player;
import cc.lv1.rpg.gs.net.impl.ValidateJob;

public class DatabaseAccessor 
{ 
 
	private ConnectionFactory cf;
	
	private String dbhost;
	
	private String dbport;
	
	private String dbname;
	
	private String user;
	
	private String pwd;
	
	
	public static int roleObjectIndex = 0;
	
	public static int goodsObjectIndex = 0;
	
	public static int familyObjectIndex = 0;

	public DatabaseAccessor(String dbhost,String dbport,String dbname, String user, String pwd)
	{
		this.dbhost = dbhost;
		this.dbport = dbport;
		this.dbname = dbname;
		this.user = user;
		this.pwd = pwd;
		this.initial();
	}
	
	private void initial()
	{
		cf = new ConnectionFactory.SqlServerFactory(dbhost,dbport,dbname,user,pwd);
	}
	
	/** 保存player信息 */
	public void savePlayer(Player player)
	{
		CallableStatement callableStatement = null;
		Connection conn = null;

		ByteBuffer buffer = new ByteBuffer(4096 * 10);
		player.saveTo(buffer);
		byte[] data = buffer.getBytes();
		
		try 
		{

			conn = cf.getConnection();
			synchronized(conn)
			{
				callableStatement = conn.prepareCall("{call PlayerSave(?,?,?,?,?)}");
				callableStatement.setBytes(1, data);
				callableStatement.setString(2, player.accountName);
				callableStatement.setInt(3, player.id);
				callableStatement.setString(4,player.name);
				callableStatement.setInt(5, 0);
				callableStatement.execute();
				callableStatement.close();
			}
			cf.recycleConnection(conn);
		} 
		catch(Exception e) 
		{
			e.printStackTrace();
		}
	}
	
	/**读取player信息*/
	public void loadPlayer(String accountName ,ValidateJob.PlayerLoader loader)
	{
		
 		CallableStatement callableStatement = null;
		Connection conn = null;
		
		byte[] data = null;
		int type = 0;
		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{
				callableStatement = conn.prepareCall("{call PlayerLoad(?)}");
				callableStatement.setString(1, accountName);
				ResultSet result = callableStatement.executeQuery();
				while(result.next())
				{
					data = result.getBytes("playerdata");
					type = result.getInt("playerType");
				}
				callableStatement.close();
			}
			cf.recycleConnection(conn);
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
			if(loader != null)
				loader.loadPlayer(ValidateJob.PlayerLoader.EXCEPT_PLAYER, null);
			return;
		} 
			
		if (data == null)
		{
			if(loader != null)
				loader.loadPlayer(ValidateJob.PlayerLoader.NEW_PLAYER, null);
		}
		else
		{
			Player player = new Player();	
			ByteBuffer buffer = new ByteBuffer(data);
			player.loadFrom(buffer);
			player.initial();

			if(type == 1)
			{
				if(loader != null)
					loader.loadPlayer(ValidateJob.PlayerLoader.CLOSE_PLAYER, player);
			}
			else
			{
				checkPlayerPay(player);

				if(loader != null)
					loader.loadPlayer(ValidateJob.PlayerLoader.OLD_PLAYER, player);
			}

		}
	}
	
	/**
	 * 检查玩家是否有充值
	 * @param player
	 */
	private void checkPlayerPay(Player player)
	{
		PreparedStatement statement = null;
		Connection conn = null;
		boolean isProcess = false;
		int money = 0;
		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{
				statement = conn.prepareStatement("select payMoney from T_Server_Pay where accountName=? and payType=1 and payState=1");//type ==1 充值  state==1 没冲到账户
				statement.setString(1, player.accountName);
				ResultSet result = statement.executeQuery();
				while(result.next())
				{
					money += result.getInt("payMoney");
					
					if(money != 0)
						isProcess = true;

				}

				if(isProcess)
				{
					statement = conn.prepareStatement("update T_Server_Pay set payState=? where accountName=? and payType=1");//type ==1 充值  state==1 没冲到账户
					statement.setInt(1, 0);
					statement.setString(2, player.accountName);
					statement.execute();
					
					Bag bag = (Bag)player.getExtPlayerInfo("bag");
					bag.money +=money;
				}
				
				statement.close();
			}
			cf.recycleConnection(conn);
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		} 
	}
	
	
	public Player getPlayer(String accountName)
	{
 		CallableStatement callableStatement = null;
		Connection conn = null;
		
		byte[] data = null;
		try 
		{
			conn = cf.getConnection();
			
			synchronized(conn)
			{
				callableStatement = conn.prepareCall("{call PlayerLoad(?)}");
				callableStatement.setString(1, accountName);
				ResultSet result = callableStatement.executeQuery();
				while(result.next())
				{
					data = result.getBytes("playerdata");
				}
				callableStatement.close();
			}
			cf.recycleConnection(conn);
		} 
		catch (Exception e) 
		{
			return null;
		} 
			
		if (data == null)
		{
			return null;
		}
		else
		{
			Player player = new Player();	
			ByteBuffer buffer = new ByteBuffer(data);
			player.loadFrom(buffer);
			player.initial();
			return player;
		}
	}
	
	
	public byte[] loadPlayerData(String accountName)
	{
 		CallableStatement callableStatement = null;
		Connection conn = null;
		
		byte[] data = null;
		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{
				callableStatement = conn.prepareCall("{call PlayerLoad(?)}");
				callableStatement.setString(1, accountName);
				ResultSet result = callableStatement.executeQuery();
				while(result.next())
				{
					data = result.getBytes("playerdata");
				}
				callableStatement.close();
			}
			cf.recycleConnection(conn);
		} 
		catch (Exception e) 
		{
			return null;
		}
		return data;
	}
	
	

	public void savePlayerData(int id,String accountName,byte[] data)
	{
		CallableStatement callableStatement = null;
		Connection conn = null;

		try 
		{

			conn = cf.getConnection();
			synchronized(conn)
			{
				callableStatement = conn.prepareCall("{call PlayerSave(?,?,?,?,?)}");
				callableStatement.setBytes(1, data);
				callableStatement.setString(2, accountName);
				callableStatement.setInt(3, id);
				callableStatement.setString(4,accountName);
				callableStatement.setInt(5, 0);
				callableStatement.execute();
				callableStatement.close();
			}
			cf.recycleConnection(conn);
		} 
		catch(Exception e) 
		{
			e.printStackTrace();
		}
	}


	/**
	 * 取得所有玩家 分页
	 * 数量 开始 --- 结束
	 * 0--10
	 * 10--20
	 * 20--30
	 */
	public List loadPlayers(int begin,int end)
	{
		PreparedStatement statement = null;
		Connection conn = null;
		List list = new ArrayList();
		byte[] data = null;
		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{
				statement = conn.prepareStatement("SELECT TOP "+(end-begin)+" playerdata FROM Playerinfo WHERE (ID NOT IN (SELECT TOP "+begin+" id FROM Playerinfo ORDER BY id))ORDER BY ID ");
				ResultSet result = statement.executeQuery();
				while(result.next())
				{
					data = result.getBytes("playerdata");

					Player player = null;
					try
					{
						player = new Player();	
						ByteBuffer buffer = new ByteBuffer(data);
						player.loadFrom(buffer);
						player.initial();
					}
					catch(Exception e)
					{
						System.out.println("error player data.....");
						continue;
					}

					list.add(player);
				}
				statement.close();
			}
			cf.recycleConnection(conn);
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		} 
		return list;
	}
	
	/**
	 * 取得所有玩家
	 * @return
	 */
	public List loadPlayers()
	{
		Statement statement = null;
		Connection conn = null;
		List list = new ArrayList();
		byte[] data = null;
		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{
				statement = conn.createStatement();
				ResultSet result = statement.executeQuery("select playerData from playerInfo");
				while(result.next())
				{
					data = result.getBytes("playerdata");

					Player player = null;
					try
					{
						player = new Player();	
						ByteBuffer buffer = new ByteBuffer(data);
						player.loadFrom(buffer);
						player.initial();
					}
					catch(Exception e)
					{
						System.out.println("error player data.....");
						continue;
					}

					list.add(player);
				}
				statement.close();
			}
			cf.recycleConnection(conn);
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		} 
		return list;
	}
	
	/**
	 * 保存玩家
	 * @param list
	 */
	public void savePlayers(List list)
	{
		int size = list.size();
		for (int i = 0; i < size; i++)
		{
			Player player = (Player)list.get(i);
			//System.out.println("player name : "+player.accountName);
			savePlayer(player);
		}
	}
	
	/** 删除角色 ***/
	public boolean delPlayer(Player player)
	{
 		CallableStatement callableStatement = null;
		Connection conn = null;
		
		boolean result = false;
		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{
				callableStatement = conn.prepareCall("{?=call PlayerRemove(?,?)}");
				callableStatement.setInt(2, player.id);
				callableStatement.setString(3, player.accountName);
				callableStatement.registerOutParameter(1, Types.INTEGER);
				callableStatement.execute();

				result = callableStatement.getInt(1)==1;
				callableStatement.close();
			}
			cf.recycleConnection(conn);
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		return result;
	}
	
	
	/**
	 * 取得一个新的角色id
	 * @return
	 */
	public int getNewPlayerId() 
	{
		if(DatabaseAccessor.roleObjectIndex == 0)
		{
			return indexProcess("RoleIndex", 1);
		}
		return ++DatabaseAccessor.roleObjectIndex;
	}
	
	/**
	 * 取得物品流水号
	 * @return
	 */
	public int getGoodsObjIndex()
	{
		if(DatabaseAccessor.goodsObjectIndex == 0)
		{
			return indexProcess("GoodsIndex", 1);
		}
		return ++DatabaseAccessor.goodsObjectIndex;
	}
	
	/**
	 * 取得家族流水号
	 * @return
	 */
	public int getFamilyObjIndex()
	{
		if(DatabaseAccessor.familyObjectIndex == 0)
		{
			return indexProcess("FamilyIndex", 1);
		}
		return ++DatabaseAccessor.familyObjectIndex;
	}
	
	/**
	 * 保存下标
	 */
	public void savedObjIndexs()
	{
		
		if(roleObjectIndex != 0)
		{
			indexProcess("RoleIndex", 2);
		}
		
		if(goodsObjectIndex != 0)
		{
			indexProcess("GoodsIndex", 2);
		}
		
		if(familyObjectIndex != 0)
		{
			indexProcess("FamilyIndex", 2);
		}
	}
	
	
	/**
	 * 处理
	 * @param index RoleIndex	GoodsIndex	FamilyIndex
	 * @param type 1 读取 ， 2保存
	 */
	private int indexProcess(String index,int type)
	{
		PreparedStatement statement = null;
		Connection conn = null;
		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{	
				if(type == 1)
				{
					statement = conn.prepareStatement("select "+index+" from GameIndex");
					ResultSet rs = statement.executeQuery();
					while(rs.next())
					{
						if(index.equals("RoleIndex"))
						{
							return DatabaseAccessor.roleObjectIndex = rs.getInt(1);
						}
						else if(index.equals("GoodsIndex"))
						{
							return DatabaseAccessor.goodsObjectIndex = rs.getInt(1);
						}
						else if(index.equals("FamilyIndex"))
						{
							return DatabaseAccessor.familyObjectIndex = rs.getInt(1);
						}
					}
				}
				else if(type == 2)
				{
					if(index.equals("RoleIndex"))
					{
						statement = conn.prepareStatement("update GameIndex set "+index+"="+(DatabaseAccessor.roleObjectIndex+1));
					}
					else if(index.equals("GoodsIndex"))
					{
						statement = conn.prepareStatement("update GameIndex set "+index+"="+(DatabaseAccessor.goodsObjectIndex+1));
					}
					else if(index.equals("FamilyIndex"))
					{
						statement = conn.prepareStatement("update GameIndex set "+index+"="+(DatabaseAccessor.familyObjectIndex+1));
					}
					statement.execute();
				}
			}	
		} 
		catch(Exception e) 
		{
			e.printStackTrace();
		}
		finally
		{
			try
			{
				if(statement != null)
					statement.close();
				
				cf.recycleConnection(conn);
			} 
			catch (SQLException e)
			{
				e.printStackTrace();
			}
			
		}
		return 0 ;
	}
	
	

	
	/**
	 * 检查有无相同的名字
	 * @param playerName
	 * @return
	 */
	public boolean checkPlayerName(String playerName)
	{
		CallableStatement callableStatement = null;
		Connection conn = null;
		int result = 0;
		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{
				callableStatement = conn.prepareCall("{?=call GameRoleName(?)}");
				callableStatement.registerOutParameter(1, Types.INTEGER);
				callableStatement.setString(2, playerName);
				callableStatement.execute();
				result = callableStatement.getInt(1);
				callableStatement.close();
			}	
			cf.recycleConnection(conn);
		} 
		catch(Exception e) 
		{
			e.printStackTrace();
		}
		return result == 1;
	}
	
	

	
	
	public boolean createOrUpdateWorldInfo(WorldManager world)
	{
		CallableStatement callableStatement = null;
		Connection conn = null;
		
		
		ByteBuffer buffer = new ByteBuffer(4096 * 10);
		world.saveTo(buffer);
		byte[] data = buffer.getBytes();
		
		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{
				callableStatement = conn.prepareCall("{call createOrUpdateServerInfo(?,?,?,?,?)}");	
				callableStatement.setInt(1, world.getGameServer().id);
				callableStatement.setString(2, world.getGameServer().name);
				callableStatement.setString(3, "test localhost");
				callableStatement.setInt(4,0);
				callableStatement.setBytes(5, data);
				callableStatement.execute();
				callableStatement.close();
			}
			cf.recycleConnection(conn);
		}
		catch(Exception e) 
		{
			e.printStackTrace();
		}
		return true;
	}
	

	public void loadWorldInfo(WorldManager world)
	{
		
 		CallableStatement callableStatement = null;
		Connection conn = null;
		
		byte[] data = null;
		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{
				callableStatement = conn.prepareCall("{call LoadServerInfo(?)}");
				callableStatement.setInt(1, world.getGameServer().id);
				ResultSet result = callableStatement.executeQuery();
				while(result.next())
				{
					data = result.getBytes("S_DATA");
				}
				callableStatement.close();
			}
			cf.recycleConnection(conn);
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		} 
		
		if(data == null)
		{
			System.out.println("load server data is null");
			return;
		}
		world.loadFrom(new ByteBuffer(data));
	}
	
	
	

	
	
	public ConnectionFactory getConnectionFactory()
	{
		return cf;
	}
	

	public String getDbhost()
	{
		return dbhost;
	}

	public String getDbport()
	{
		return dbport;
	}

	public String getDbname()
	{
		return dbname;
	}

	public String getUser()
	{
		return user;
	}

	public String getPwd()
	{
		return pwd;
	}

//------------------------------------------------------------------------------------------------------------------------------------------

	
	/**
	 * 临时，检查是否有相同名字
	 * @param name
	 */
	public int checkUserName(String name,String pwd)
	{
		PreparedStatement statement = null;
		Connection conn = null;
		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{	
				statement = conn.prepareStatement("select password,state,email from UserInfo where name=?");
				statement.setString(1, name);
				ResultSet rs = statement.executeQuery();
				while(rs.next())
				{
					int state = rs.getInt(2);
					
					if(state == 1 && pwd == null) 
						return 1;
					
					if(rs.getString(1).equals(pwd))
					{
						if(rs.getString(3) == null) //email为空的状态
							return -3;
						return 1;
					}
				}
			}	
		} 
		catch(Exception e) 
		{
			e.printStackTrace();
		}
		finally
		{
			try
			{
				if(statement != null)
					statement.close();
				
				cf.recycleConnection(conn);
			} 
			catch (SQLException e)
			{
				e.printStackTrace();
			}
			
		}
		return -1;
	}
	
	/**
	 * 临时，注册名字
	 * @param name
	 * @param pwd
	 * @return
	 */
	public boolean regUser(String name,String pwd)
	{
		PreparedStatement statement = null;
		Connection conn = null;
	
		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{	
				statement = conn.prepareStatement("insert into UserInfo(name,password,state,lasttime) values(?,?,?,?)");

				statement.setString(1, name);
				statement.setString(2, pwd);
				statement.setInt(3, 1);
				statement.setDate(4, new Date(System.currentTimeMillis()));
				statement.execute();
				return true;
			}	
		} 
		catch(Exception e) 
		{
			e.printStackTrace();
		}
		finally
		{
			try
			{
				statement.close();
				cf.recycleConnection(conn);
			} 
			catch (SQLException e)
			{
				e.printStackTrace();
			}
		}
		return false;
	}
	
	/**
	 * 修改密码
	 * @param name
	 * @param pwd
	 * @return
	 */
	public boolean updatePwd(String accountName,String oldPwd,String newPwd)
	{
		PreparedStatement statement = null;
		Connection conn = null;
	
		boolean isCanChange = false;
		
		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{	
				
				statement = conn.prepareStatement("select password from UserInfo where name=?");
				statement.setString(1, accountName);
				ResultSet rs = statement.executeQuery();
				while(rs.next())
				{
					if(rs.getString(1).equals(oldPwd))
					{
						isCanChange = true;
					}

				}
				
				if(isCanChange)
				{
					statement = conn.prepareStatement("update UserInfo set password=? where name=?");
					statement.setString(1, newPwd);
					statement.setString(2, accountName);
					statement.execute();
				}
				
			}	
		} 
		catch(Exception e) 
		{
			e.printStackTrace();
		}
		finally
		{
			try
			{
				statement.close();
				cf.recycleConnection(conn);
			} 
			catch (SQLException e)
			{
				e.printStackTrace();
			}
		}
		return isCanChange;
	}
	
	
	/**
	 * 修改邮件
	 * @param name
	 * @param pwd
	 * @return
	 */
	public boolean updateEmail(String accountName,String oldPwd,String email)
	{
		PreparedStatement statement = null;
		Connection conn = null;
	
		boolean isCanChange = false;
		
		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{	
				
				statement = conn.prepareStatement("select password from UserInfo where name=?");
				statement.setString(1, accountName);
				ResultSet rs = statement.executeQuery();
				while(rs.next())
				{
					if(rs.getString(1).equals(oldPwd))
					{
						isCanChange = true;
					}
				}
				
				if(isCanChange)
				{
					statement = conn.prepareStatement("update UserInfo set email=? where name=?");
					statement.setString(1, email);
					statement.setString(2, accountName);
					statement.execute();
				}
				
			}	
		} 
		catch(Exception e) 
		{
			e.printStackTrace();
		}
		finally
		{
			try
			{
				statement.close();
				cf.recycleConnection(conn);
			} 
			catch (SQLException e)
			{
				e.printStackTrace();
			}
		}
		return isCanChange;
	}
	
	
	/**
	 * 保存服务器平均和最大15分钟一次
	 */
	public void avgAndMaxOnServer(int accounts)
	{
		CallableStatement callableStatement = null;
		Connection conn = null;

		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
		int loginTime = Integer.parseInt(sdf.format(new java.util.Date()));

		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{
				
				callableStatement = conn.prepareCall("{call avgAndMaxOnServer(?,?,?)}");
				callableStatement.setInt(1, loginTime);
				callableStatement.setInt(2, GameServer.getInstance().id);//
				callableStatement.setInt(3, accounts);
				callableStatement.execute();
				callableStatement.close();
			}
			cf.recycleConnection(conn);
		}  
		catch(Exception e) 
		{
			e.printStackTrace();
		}
	}

	/**
	 * 查询 当天/当月 注册量  格式2009-07-09
	 * @param currentDay
	 * boolean isDay    true为天   false为月
	 */
	public int queryRegCount(String currentDay,boolean isDay)
	{
		PreparedStatement statement = null;
		Connection conn = null;
		
		int count = 0;
		
		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{	
				statement = conn.prepareStatement("select createTime from PlayerInfo");
				ResultSet rs = statement.executeQuery();
				
				if(isDay)
				{
					while(rs.next())
					{
						Date da = rs.getDate(1);
						
						if(da == null)
							continue;
						
						if(da.toString().equals(currentDay))
							count++;
					}
				}
				else
				{
					currentDay = currentDay.substring(0,7);
					
					while(rs.next())
					{
						Date da = rs.getDate(1);
						
						if(da == null)
							continue;
						
						if(da.toString().substring(0,7).equals(currentDay))
							count++;
					}
				}
			}	
		} 
		catch(Exception e) 
		{
			e.printStackTrace();
		}
		finally
		{
			try
			{
				if(statement != null)
					statement.close();
				
				cf.recycleConnection(conn);
			} 
			catch (SQLException e)
			{
				e.printStackTrace();
			}
		}
		return count;
	}
	
/*	*//**
	 * 查询 当天/当月 注册量  格式2009-07-09 list
	 * @param currentDay
	 * boolean isDay    true为天   false为月
	 *//*
	public ByteBuffer queryRegList(String currentDay,boolean isDay)
	{
		PreparedStatement statement = null;
		Connection conn = null;
		
		ByteBuffer buffer = new ByteBuffer(64);
		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{	
				statement = conn.prepareStatement("select lastTime,name,state from UserInfo");
				ResultSet rs = statement.executeQuery();
				
				if(isDay)
				{ 
					String name = null;
					Date da = null;
					int state = 0;
					
					while(rs.next())
					{
						 da = rs.getDate(1);
						 name= rs.getString(2);
						 state = rs.getInt(3);
						
						if(da.toString().equals(currentDay))
						{
							buffer.writeUTF(name);
							buffer.writeInt(state);
							buffer.writeUTF(da.toString());
						}
					}
				}
				else
				{
					currentDay = currentDay.substring(0,7);
					
					String name = null;
					Date da = null;
					int state = 0;
					
					while(rs.next())
					{
						da = rs.getDate(1);
						
						if(da.toString().substring(0,7).equals(currentDay))
						{
							buffer.writeUTF(name);
							buffer.writeInt(state);
							buffer.writeUTF(da.toString());
						}
					}
				}
			}	
		} 
		catch(Exception e) 
		{
			e.printStackTrace();
		}
		finally
		{
			try
			{
				if(statement != null)
					statement.close();
				
				cf.recycleConnection(conn);
			} 
			catch (SQLException e)
			{
				e.printStackTrace();
			}
		}
		return buffer;
	}*/
	
	
	/**
	 * 查询当天玩家的平均数
	 * @param currentDay 格式2009-07-09
	 * @param isDay true为天   false为月
	 * @return
	 */
	public int queryAvgCount(String currentDay,boolean isDay)
	{
		PreparedStatement statement = null;
		Connection conn = null;
		
		int count = 0;
		
		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{	
				statement = conn.prepareStatement("select avgTimeId,avgAccount,avgCount from T_Server_AVG where serverId=?");
				statement.setInt(1, GameServer.getInstance().id);
				ResultSet rs = statement.executeQuery();
				
				String [] str = Utils.split(currentDay, "-");
				
				
				if(isDay)
				{
					currentDay = str[0]+str[1]+str[2];
					
					while(rs.next())
					{
						String day = rs.getString(1);
						
						if(day.toString().equals(currentDay))
						{
							int avgAccount = rs.getInt(2);
							int avgCount = rs.getInt(3);
							count = avgAccount/avgCount;
							break;
						}
					}
				}
				else
				{
					currentDay = str[0]+str[1];
					int avgAccount = 0;
					int avgCount = 0;
					while(rs.next())
					{
						String day = rs.getString(1);
						
						if(day.toString().startsWith(currentDay))
						{
							avgAccount += rs.getInt(2);
							avgCount += rs.getInt(3);
						}
					}
					count = avgAccount/avgCount;
				}
			}	
		} 
		catch(Exception e) 
		{
			e.printStackTrace();
		}
		finally
		{
			try
			{
				if(statement != null)
					statement.close();
				
				cf.recycleConnection(conn);
			} 
			catch (SQLException e)
			{
				e.printStackTrace();
			}
		}
		return count;
	}
	
	
	/**
	 * 查询当天玩家的平均数
	 * @param currentDay 格式2009-07-09
	 * @param isDay true为天   false为月
	 * @return
	 **/
	public ByteBuffer queryAvgList(String currentDay,boolean isDay)
	{
		PreparedStatement statement = null;
		Connection conn = null;
		
		ByteBuffer buffer = new ByteBuffer(64);
		
		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{	
				statement = conn.prepareStatement("select avgTimeId,avgAccount,avgCount from T_Server_AVG where serverId=?");
				statement.setInt(1, GameServer.getInstance().id);
				ResultSet rs = statement.executeQuery();
				
				String [] str = Utils.split(currentDay, "-");
				
				
				if(isDay)
				{
					currentDay = str[0]+str[1]+str[2];
					
					while(rs.next())
					{
						String day = rs.getString(1);
						
						if(day.toString().equals(currentDay))
						{
							int avgAccount = rs.getInt(2);
							int avgCount = rs.getInt(3);
							
							buffer.writeUTF(currentDay);
							buffer.writeInt(avgAccount/avgCount);
							break;
						}
					}
				}
				else
				{
					currentDay = str[0]+str[1];
					int avgAccount = 0;
					int avgCount = 0;
					while(rs.next())
					{
						String day = rs.getString(1);
						
						if(day.toString().startsWith(currentDay))
						{
							avgAccount = rs.getInt(2);
							avgCount = rs.getInt(3);
							
							buffer.writeUTF(day.toString());
							buffer.writeInt(avgAccount/avgCount);
						}
					}

				}
			}	
		} 
		catch(Exception e) 
		{
			e.printStackTrace();
		}
		finally
		{
			try
			{
				if(statement != null)
					statement.close();
				
				cf.recycleConnection(conn);
			} 
			catch (SQLException e)
			{
				e.printStackTrace();
			}
		}
		return buffer;
	}
	
	/**
	 * 查询当天玩家的总数  最大在线  count 
	 * @param currentDay 格式2009-07-09
	 * @param isDay true为天   false为月
	 * @return
	 */
	public int queryMaxCount(String currentDay,boolean isDay)
	{
		PreparedStatement statement = null;
		Connection conn = null;
		
		int count = 0;
		
		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{	
				statement = conn.prepareStatement("select maxTimeId,maxAccount from T_Server_MAX where serverId=?");
				statement.setInt(1, GameServer.getInstance().id);
				ResultSet rs = statement.executeQuery();
				
				String [] str = Utils.split(currentDay, "-");
				
				
				if(isDay)
				{
					currentDay = str[0]+str[1]+str[2];
					
					while(rs.next())
					{
						String day = rs.getString(1);
						
						if(day.toString().equals(currentDay))
						{
							count = rs.getInt(2);
							break;
						}
					}
				}
				else
				{
					currentDay = str[0]+str[1];
					while(rs.next())
					{
						String day = rs.getString(1);
						
						if(day.toString().startsWith(currentDay))
						{
							count += rs.getInt(2);
						}
					}

				}
			}	
		} 
		catch(Exception e) 
		{
			e.printStackTrace();
		}
		finally
		{
			try
			{
				if(statement != null)
					statement.close();
				
				cf.recycleConnection(conn);
			} 
			catch (SQLException e)
			{
				e.printStackTrace();
			}
		}
		return count;
	}
	
	
	/**
	 * 查询当天玩家的最大数
	 * @param currentDay 格式2009-07-09 list
	 * @param isDay true为天   false为月
	 * @return
	 **/
	public ByteBuffer queryMaxList(String currentDay,boolean isDay)
	{
		PreparedStatement statement = null;
		Connection conn = null;
		
		ByteBuffer buffer = new ByteBuffer(64);
		
		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{	
				statement = conn.prepareStatement("select maxTimeId,maxAccount from T_Server_MAX where serverId=?");
				statement.setInt(1, GameServer.getInstance().id);
				ResultSet rs = statement.executeQuery();
				
				String [] str = Utils.split(currentDay, "-");
				
				
				if(isDay)
				{
					currentDay = str[0]+str[1]+str[2];
					
					while(rs.next())
					{
						String day = rs.getString(1);
						
						if(day.toString().equals(currentDay))
						{
							buffer.writeUTF(currentDay);
							buffer.writeInt(rs.getInt(2));
							break;
						}
					}
				}
				else
				{
					currentDay = str[0]+str[1];

					while(rs.next())
					{
						String day = rs.getString(1);
						
						if(day.toString().startsWith(currentDay))
						{
							buffer.writeUTF(day);
							buffer.writeInt(rs.getInt(2));
						}
						
					}

				}
			}	
		} 
		catch(Exception e) 
		{
			e.printStackTrace();
		}
		finally
		{
			try
			{
				if(statement != null)
					statement.close();
				
				cf.recycleConnection(conn);
			} 
			catch (SQLException e)
			{
				e.printStackTrace();
			}
		}
		return buffer;
	}
	
	/**
	 *	回被玩家删除的档
	 */
	public int returnDeleteData(String account)
	{
		PreparedStatement statement = null;
		Connection conn = null;
		
		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{	
				statement = conn.prepareStatement("select playerData from bak_playerinfo where accountName=?");
				statement.setString(1, account);
				
				ResultSet rs = statement.executeQuery();

				while(rs.next())
				{
					byte []data = rs.getBytes("playerData");
					
					
					Player player = getPlayer(account);
					
					if(player == null) //正式的没有档不能回
						return -2;
					
					if(player.familyId != 0) //正式的有家族的不能回档
						return -3;
					
					Player oldPlayer = new Player();	
					ByteBuffer buffer = new ByteBuffer(data);
					oldPlayer.loadFrom(buffer);
					oldPlayer.initial();
					
					if(oldPlayer.familyId != 0)
						return -3;
					
					int id = player.id;
					
					player = oldPlayer;
					player.id = id;
					
					savePlayer(player);
					
					return 1;
				}
			}	
		} 
		catch(Exception e) 
		{
			e.printStackTrace();
		}
		finally
		{
			try
			{
				if(statement != null)
					statement.close();
				
				cf.recycleConnection(conn);
			} 
			catch (SQLException e)
			{
				e.printStackTrace();
			}
		}
		return -1;
	}
	
	
	/**
	 *	回被玩家备份档
	 *  0----7 bakIndex
	 */
	public int returnBakData(int bakIndex,String accountName)
	{
		DatabaseAccessor backDA = new DatabaseAccessor(getDbhost(),getDbport(),"qmb"+bakIndex,getUser(),getPwd());
		
		Player bakPlayer = backDA.getPlayer(accountName);

		if(bakPlayer == null) //此档案没有备份用户
			return -1;
	
		if(bakPlayer.familyId != 0) //备份的有家族的不能回档
			return -3;
		
		Player player = getPlayer(accountName);
		
		if(player == null) //正式的没有档不能回
			return -2;
		
		if(player.familyId != 0) //正式的有家族的不能回档
			return -3;
		
		int id = player.id;
		
		player = bakPlayer;
		player.id = id;
		
		savePlayer(player);

		return 1;
	}
	
	
	/**
	 * 封号改变UserInfo状态
	 * @param accountName
	 * @param state 1正常 2 封号
	 * @return
	 */
	public int changeAccountState(String accountName,int state)
	{
		PreparedStatement statement = null;
		Connection conn = null;
		
		int count = 0;

		try 
		{
			conn = cf.getConnection();
			synchronized(conn)
			{	
				statement = conn.prepareStatement("update PlayerInfo set playerType=? where accountName=?");
				statement.setInt(1, state);
				statement.setString(2, accountName);
				statement.execute();
			}	
		} 
		catch(Exception e) 
		{
			e.printStackTrace();
		}
		finally
		{
			try
			{
				if(statement != null)
					statement.close();
				
				cf.recycleConnection(conn);
			} 
			catch (SQLException e)
			{
				e.printStackTrace();
			}
		}
		return count;
	}
	
	
	//payType 1充值 2购物
	public void addPaymentInfo(int roleId,String accountName,int payType,int payState,int payMoney,String payExp)
	{
		CallableStatement callableStatement = null;
		Connection conn = null;
		
		try
		{
			conn = cf.getConnection();
			synchronized(conn)
			{
				callableStatement = conn.prepareCall("{call addPay(?,?,?,?,?,?)}");
				callableStatement.setInt(1, roleId);
				callableStatement.setString(2, accountName);
				callableStatement.setByte(3, (byte)payType);//1充值 2购物
				callableStatement.setByte(4, (byte)payState);//0已充  1未充
				callableStatement.setInt(5, payMoney);
				callableStatement.setString(6, payExp);
				callableStatement.execute();
				callableStatement.close();
			}
			cf.recycleConnection(conn);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public static void main(String[] args)
	{
		GameServer.getInstance().id = 1;
		GameServer.getInstance().initialWithoutNetServer();
		DatabaseAccessor da = GameServer.getInstance().getDatabaseAccessor();
		//da.changeAccountState("andrew",1);
		
		
		//da.returnBakData(5, "111111");

	}
	
}
